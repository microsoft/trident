# e2e-template will run AMD64 trident tests for each of our scenarios.
# This includes unit tests, integration tests, and end-to-end tests.
#
# This pipeline will use the latest release versions of base images unless,
# prior to invoking this template, an artifact has been created with information
# about the desired base image.  This artifact should be created by one of these
# templates:
#
#   .pipelines/templates/stages/base_image_config/create-base-image-config-artifact.yml
#
# With this template, set baseImageArtifactStage=CreateBaseImageConfig. This will
# ensure that e2e-template waits for the base image artifact to be created.
#
parameters:
  - name: "stageType"
    displayName: "Pipeline configuration type"
    type: string
    default: ci
    values:
      - pr-e2e
      - pr-e2e-azure
      - ci
      - pre
      - rel
      - full-validation

  - name: blockPublishing
    displayName: "Block publishing to artifact feed"
    type: boolean
    default: false

  - name: forceTridentRebuild
    displayName: "Force trident rebuild rather than downloading previously built."
    type: boolean
    default: false

  - name: includeAzure
    displayName: "Include Azure testing"
    type: boolean
    default: false

  - name: micBuildType
    displayName: MIC Build Type
    type: string
    values:
      - dev
      - preview
      - release
    default: release

  - name: micVersion
    displayName: MIC Version
    type: string
    default: "*.*.*"

  - name: numberOfUpdateIterations
    displayName: Number of times each worker invokes A/B Update
    type: number
    default: 3

  - name: osModifierBranch
    type: string
    default: "main"

  - name: baremetalTestsEnabled
    type: boolean
    default: true

  - name: forceFunctionalTestImageRebuild
    type: boolean
    default: false

  - name: baseImageArtifactStage
    type: string
    default: ""

stages:
  # Trident Build/Download
  - template: stages/trident_rpms/trident-stage.yml
    parameters:
      stageType: ${{ parameters.stageType }}
      tridentArtifactName: trident-binaries
      codeCoverage: false
      forceTridentRebuild: ${{ parameters.forceTridentRebuild }}
      osModifierBranch: ${{ parameters.osModifierBranch }}
      dependsOnStage: ${{ parameters.baseImageArtifactStage }}
      targetArchitecture: amd64

  # Build tools (Go stuff)
  - template: stages/building_tools/building-tools.yml

  # Makefile validation, only for CI
  - ${{ if eq(parameters.stageType, 'ci') }}:
      - template: stages/validate_makefile/dev-build.yml
        parameters:
          osModifierBranch: ${{ parameters.osModifierBranch }}

  # Build FT base Image, only for CI or if forceFunctionalTestImageRebuild is true
  - ${{ if or(eq(parameters.stageType, 'ci'), eq(parameters.forceFunctionalTestImageRebuild, true)) }}:
      # Build Trident installer ISO (host)
      - template: stages/build_image/build-image.yml
        parameters:
          imageName: trident-functest
          dependsOnTrident: false
          micBuildType: ${{ parameters.micBuildType }}
          micVersion: ${{ parameters.micVersion }}
          clones: 1
          dependsOnStage: ${{ parameters.baseImageArtifactStage }}

  # Build Trident container image (depends on GetTridentBinaries_rpms_amd64)
  - template: stages/build_docker_image/trident-container.yml

  # Build Trident installer ISO (host)
  - template: stages/build_image/build-image.yml
    parameters:
      imageName: trident-installer
      micBuildType: ${{ parameters.micBuildType }}
      micVersion: ${{ parameters.micVersion }}
      clones: 1
      dependsOnStage: ${{ parameters.baseImageArtifactStage }}

  # Build Trident split (stage and finalize separated) installer ISO (host)
  - template: stages/build_image/build-image.yml
    parameters:
      imageName: trident-split-installer
      micBuildType: ${{ parameters.micBuildType }}
      micVersion: ${{ parameters.micVersion }}
      clones: 1
      dependsOnStage: ${{ parameters.baseImageArtifactStage }}

  # Build Trident installer ISO (container)
  - template: stages/build_image/build-image.yml
    parameters:
      imageName: trident-container-installer
      runtimeEnv: "container"
      micBuildType: ${{ parameters.micBuildType }}
      micVersion: ${{ parameters.micVersion }}
      clones: 1
      dependsOnStage: ${{ parameters.baseImageArtifactStage }}

  # Build Trident test image (regular)
  - template: stages/build_image/build-image.yml
    parameters:
      imageName: trident-testimage
      micBuildType: ${{ parameters.micBuildType }}
      micVersion: ${{ parameters.micVersion }}
      dependsOnStage: ${{ parameters.baseImageArtifactStage }}

  # Build Trident test image (container)
  - template: stages/build_image/build-image.yml
    parameters:
      imageName: trident-container-testimage
      runtimeEnv: "container"
      micBuildType: ${{ parameters.micBuildType }}
      micVersion: ${{ parameters.micVersion }}
      dependsOnStage: ${{ parameters.baseImageArtifactStage }}

  # Build Trident test image for root-verity (host)
  - template: stages/build_image/build-image.yml
    parameters:
      imageName: trident-verity-testimage
      micBuildType: ${{ parameters.micBuildType }}
      micVersion: ${{ parameters.micVersion }}
      dependsOnStage: ${{ parameters.baseImageArtifactStage }}

  # Build Trident test image for root-verity (container)
  - template: stages/build_image/build-image.yml
    parameters:
      imageName: trident-container-verity-testimage
      runtimeEnv: "container"
      micBuildType: ${{ parameters.micBuildType }}
      micVersion: ${{ parameters.micVersion }}
      dependsOnStage: ${{ parameters.baseImageArtifactStage }}

  # Build Trident test image for usr-verity (host)
  - template: stages/build_image/build-image.yml
    parameters:
      imageName: trident-usrverity-testimage
      micBuildType: ${{ parameters.micBuildType }}
      micVersion: ${{ parameters.micVersion }}
      dependsOnStage: ${{ parameters.baseImageArtifactStage }}

  # Build Trident test image for usr-verity (container)
  - template: stages/build_image/build-image.yml
    parameters:
      imageName: trident-container-usrverity-testimage
      runtimeEnv: "container"
      micBuildType: ${{ parameters.micBuildType }}
      micVersion: ${{ parameters.micVersion }}
      dependsOnStage: ${{ parameters.baseImageArtifactStage }}

# BuildAZL installer (attended and unattended)
  - ${{ if or(eq(parameters.stageType, 'pr-e2e'), eq(parameters.stageType, 'ci'), eq(parameters.stageType, 'pr-e2e-azure')) }}:
      - template: stages/azl_installer/azl-installer.yml
        parameters:
          micBuildType: ${{ parameters.micBuildType }}
          micVersion: ${{ parameters.micVersion }}     
          dependsOnStage: ${{ parameters.baseImageArtifactStage }}

  # dom0 is failing for not known reasons ... comment out for now to unblock, longterm this may
  # be removed from Trident pipelines alltogether in favor of being only test-images
  # - ${{ if or(eq(parameters.stageType, 'ci'), eq(parameters.stageType, 'pr-e2e')) }}:
  #   # Build Trident test image (dom0: mshv+ch)
  #   - template: stages/build_image/trident-mshvch-dom0-testimg.yml

  # Test Servicing on VMs
  - template: stages/testing_servicing/vm-testing.yml
    parameters:
      includeQemu: true
      includeUKI: true
      includeAzure: ${{ parameters.includeAzure }}
      micBuildType: ${{ parameters.micBuildType }}
      micVersion: ${{ parameters.micVersion }}
      verboseLogging: true
      updateIterationCount: ${{ parameters.numberOfUpdateIterations }}
      dependsOnStage: ${{ parameters.baseImageArtifactStage }}

  # TESTING stages for PRERELEASE
  - ${{ if eq(parameters.stageType, 'pre') }}:
      # Functional Testing
      - template: stages/testing_functional/functional-testing.yml
        parameters:
          dependsOnStage: ${{ parameters.baseImageArtifactStage }}
          ${{ if parameters.forceFunctionalTestImageRebuild }}:
            downloadPrebuiltImage: false

      # VM Testing (host, daily)
      - template: stages/testing_vm/netlaunch-testing.yml
        parameters:
          buildPurpose: "daily"
          runtimeEnv: "host"

      - ${{ if parameters.baremetalTestsEnabled }}:
          # BM Testing (host, daily)
          - template: stages/testing_baremetal/baremetal-testing.yml
            parameters:
              buildPurpose: "daily"
              runtimeEnv: "host"

          # BM Testing (container, daily)
          - template: stages/testing_baremetal/baremetal-testing.yml
            parameters:
              buildPurpose: "daily"
              runtimeEnv: "container"
              extraDependsOn: "BaremetalDeploymentTesting_host"

      # VM Testing (container, daily)
      - template: stages/testing_vm/netlaunch-testing.yml
        parameters:
          buildPurpose: "daily"
          runtimeEnv: "container"

  # TESTING stages for full validation matrix host/container and bm/bm
  - ${{ if eq(parameters.stageType, 'full-validation') }}:
      # Functional Testing
      - template: stages/testing_functional/functional-testing.yml
        parameters:
          dependsOnStage: ${{ parameters.baseImageArtifactStage }}
          ${{ if parameters.forceFunctionalTestImageRebuild }}:
            downloadPrebuiltImage: false

      # VM Testing (host, weekly)
      - template: stages/testing_vm/netlaunch-testing.yml
        parameters:
          buildPurpose: "weekly"
          runtimeEnv: "host"

      # VM Testing (container, weekly)
      - template: stages/testing_vm/netlaunch-testing.yml
        parameters:
          buildPurpose: "weekly"
          runtimeEnv: "container"

      - ${{ if parameters.baremetalTestsEnabled }}:
          # BM Testing (host, weekly)
          - template: stages/testing_baremetal/baremetal-testing.yml
            parameters:
              buildPurpose: "weekly"
              runtimeEnv: "host"

          # BM Testing (container, weekly)
          - template: stages/testing_baremetal/baremetal-testing.yml
            parameters:
              buildPurpose: "weekly"
              runtimeEnv: "container"
              extraDependsOn: "BaremetalDeploymentTesting_host"

  # TESTING stages for CI
  - ${{ if eq(parameters.stageType, 'ci') }}:
      # Functional Testing
      - template: stages/testing_functional/functional-testing.yml
        parameters:
          downloadPrebuiltImage: false
          osModifierBranch: ${{ parameters.osModifierBranch }}
          dependsOnStage: ${{ parameters.baseImageArtifactStage }}

      # VM Testing (host, post_merge)
      - template: stages/testing_vm/netlaunch-testing.yml
        parameters:
          buildPurpose: "post_merge"
          runtimeEnv: "host"

      # VM Testing (container, post_merge)
      - template: stages/testing_vm/netlaunch-testing.yml
        parameters:
          buildPurpose: "post_merge"
          runtimeEnv: "container"

  # TESTING stages for PR-E2E
  - ${{ if eq(parameters.stageType, 'pr-e2e') }}:
      # Functional Testing (short version)
      - template: stages/testing_functional/functional-testing.yml
        parameters:
          rerunTests: false
          dependsOnStage: ${{ parameters.baseImageArtifactStage }}
          ${{ if parameters.forceFunctionalTestImageRebuild }}:
            downloadPrebuiltImage: false

      # VM Testing (host, pullrequest)
      - template: stages/testing_vm/netlaunch-testing.yml
        parameters:
          buildPurpose: "pullrequest"
          runtimeEnv: "host"

      # VM Testing (container, pullrequest)
      - template: stages/testing_vm/netlaunch-testing.yml
        parameters:
          buildPurpose: "pullrequest"
          runtimeEnv: "container"

  # PUBLISHING
  #
  # Only enabled for PRERELEASE and CI unless blockPublishing is set to true.
  - ${{ if eq(parameters.blockPublishing, false) }}:
      - ${{ if or(eq(parameters.stageType, 'pre'), eq(parameters.stageType, 'ci')) }}:
          - template: stages/publishing/publish.yml
            parameters:
              stageType: ${{ parameters.stageType }}
