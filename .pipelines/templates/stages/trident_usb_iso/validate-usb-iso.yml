steps:
  # Download azl-installer artifact
  - task: DownloadPipelineArtifact@2
    displayName: "Download azl-installer ISO"
    inputs:
      buildType: current
      artifactName: "azl-installer"
      targetPath: $(Pipeline.Workspace)/azl-installer

  - bash: |
      set -eux

      sudo NEEDRESTART_MODE=a apt-get install -y \
          swtpm \
          swtpm-tools \
          bridge-utils \
          virt-manager \
          qemu-efi \
          qemu-kvm \
          libtpms0 \
          libvirt-daemon-system \
          libvirt-clients \
          python3-libvirt \
          ovmf \
          openssl \
          python3-netifaces \
          python3-docker \
          python3-bcrypt \
          python3-jinja2 \
          zstd

      sudo usermod -aG docker $USER
      sudo usermod -a -G libvirt $USER

      mkdir -p ~/.config/libvirt
      cat << EOF > ~/.config/libvirt/libvirt.conf
      uri_default = "qemu:///system"
      EOF

      cp $(Pipeline.Workspace)/azl-installer/azl-installer.iso /tmp/azl-installer.iso
      sudo qemu-img create -f qcow2 /tmp/usb-iso-test-vm-volume.qcow2 16G

      sudo virsh net-create $(Build.SourcesDirectory)/.pipelines/templates/stages/trident_usb_iso/usb-iso-net-template.xml
      sudo virsh define $(Build.SourcesDirectory)/.pipelines/templates/stages/trident_usb_iso/usb-iso-vm-template.xml
      sudo python3 $(Build.SourcesDirectory)/.pipelines/templates/stages/trident_usb_iso/test-usb-iso.py
    timeoutInMinutes: 10
    displayName: "Test azl-installer ISO (unattended installation)"
  
  # Dump serial log of test vm
  - bash: |
      set -eu
      sudo cat /tmp/test.log
      
      sudo mkdir -p $(Pipeline.Workspace)/azl-installer-test
      sudo cp /tmp/test.log $(Pipeline.Workspace)/azl-installer-test/test.log
    timeoutInMinutes: 1
    condition: always()
