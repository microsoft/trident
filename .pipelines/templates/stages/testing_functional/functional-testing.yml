parameters:
  - name: downloadPrebuiltImage
    displayName: "Download prebuilt base image"
    type: boolean
    default: true

  - name: rerunTests
    displayName: "Rerun functional tests on the same VM"
    type: boolean
    default: true

  - name: functestImageArtifact
    type: string
    default: "trident-functest"

  - name: functestImageArtifactPipeline
    type: number
    default: 5067 # [GITHUB]-trident-ci
    displayName: Where to download prebuilt image from

stages:
  - stage: FunctionalTesting
    displayName: Functional Testing
    dependsOn:
      - ${{ if eq(parameters.downloadPrebuiltImage, false) }}:
          - TridentTestImg_trident_functest
      - ${{ else }}: []

    jobs:
      - job: FunctionalTests
        displayName: Functional Tests
        timeoutInMinutes: 50
        pool:
          type: linux
          name: trident-ubuntu-1es-pool-eastus2
          hostArchitecture: amd64

        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/build
          baseImageDirectory: "$(Build.SourcesDirectory)/artifacts"

        steps:
          - checkout: argus-toolkit
            fetchDepth: 1
          - checkout: platform-tests
            fetchDepth: 1

          - template: ../common_tasks/cargo-auth.yml

          - template: ../testing_vm/netlaunch-prep.yml

          - ${{ if eq(parameters.downloadPrebuiltImage, false) }}:
              - task: DownloadPipelineArtifact@2
                displayName: "Download FT Image from current build"
                inputs:
                  buildType: current
                  artifactName: "${{ parameters.functestImageArtifact }}"
                  targetPath: "${{ variables.baseImageDirectory }}"
          - ${{ else }}:
              - task: DownloadPipelineArtifact@2
                displayName: "Download FT Image from latest build of ${{ parameters.functestImageArtifactPipeline}}"
                inputs:
                  buildType: specific
                  project: "ECF"
                  pipeline: ${{ parameters.functestImageArtifactPipeline }}
                  buildVersionToDownload: latestFromBranch
                  branchName: "refs/heads/main"
                  artifactName: "${{ parameters.functestImageArtifact }}"
                  targetPath: "${{ variables.baseImageDirectory }}"

          - bash: |
              set -eux

              sudo apt install -y protobuf-compiler clang bc
              sudo apt remove python3-openssl
              pip install pytest assertpy paramiko pyopenssl
            displayName: Install dependencies
            retryCountOnTaskFailure: 3

          - template: ../common_tasks/build-osmodifier.yml

          - bash: |
              set -eux

              ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -q -N ""
            displayName: Set up SSH Keys
            retryCountOnTaskFailure: 3

          - template: ../common_tasks/rustup.yml

          - bash: |
              set -eux

              # Copy files from platform-tests to functional_tests
              cp platform-tests/tools/marinerhci_test_tools/node_interface.py functional_tests/
              cp platform-tests/tools/marinerhci_test_tools/ssh_node.py functional_tests/

              # Run the core of the functional tests, which means only
              # rebuilding the test binaries and invoking pytest. The regular
              # target is meant for local use and does extra setup not required
              # here.
              sg libvirt "make functional-test-core ARGUS_TOOLKIT_PATH=argus-toolkit"
            displayName: Execute Functional Tests

          - template: ../common_tasks/coverage.yml
            parameters:
              codeCoverageBaseline: 78 # Unit + functional tests
              executeUnitTests: true
              installNativeDependencies: false
              rustup: false

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "$(Build.SourcesDirectory)/target/trident_functional_tests.xml"

          - bash: |
             mkdir -p $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
             cp $(Build.SourcesDirectory)/target/trident_functional_tests.xml $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/
            displayName: "Prepare JUnit XML for artifact publishing"

          - task: PublishBuildArtifacts@1
            displayName: "Publish JUnit XML as artifact"
            condition: succeededOrFailed()
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT"
              ArtifactName: "trident_test_results"

          - bash: |
              set -eux
              mkdir -p ${{ variables.ob_outputDirectory }}/junit
              sudo cp "$(Build.SourcesDirectory)/target/trident_functional_tests.xml" "${{ variables.ob_outputDirectory }}/junit."
            displayName: Copy junit results to artifact directory
            condition: succeededOrFailed()

          - bash: |
              set -eux

              sg libvirt "make patch-functional-test ARGUS_TOOLKIT_PATH=argus-toolkit"
            condition: and(succeeded(), eq('${{ parameters.rerunTests }}', 'true'))
            displayName: Rerun Functional Tests

          # FIX: Use DownloadBuildArtifacts for build artifact + correct input names
          - task: DownloadBuildArtifacts@1
            displayName: 'Download JUnit test results for dashboard push'
            inputs:
              buildType: current
              downloadType: single
              artifactName: 'trident_test_results'
              downloadPath: '$(Build.ArtifactStagingDirectory)/junits'

          # FIX: Copy from the artifact subfolder created by DownloadBuildArtifacts
          - bash: |
              mkdir -p $(Build.ArtifactStagingDirectory)/filtered-junits
              cp $(Build.ArtifactStagingDirectory)/junits/trident_test_results/ONEBRANCH_ARTIFACT/*trident_functional_tests.xml \
                 $(Build.ArtifactStagingDirectory)/filtered-junits/ || true
              echo "Filtered JUnit files:"
              ls -la $(Build.ArtifactStagingDirectory)/filtered-junits/
            displayName: 'Filter JUnit files for dashboard push'

          # Generate build-number.config file
          - bash: |
             set -eux
             mkdir -p $(Build.ArtifactStagingDirectory)/build-number-trident-functional
             echo "$(Build.BuildNumber)" > $(Build.ArtifactStagingDirectory)/build-number-trident-functional/build-number.config
            displayName: "Generate build-number.config file"

          # Publish the artifact
          - task: PublishBuildArtifacts@1
            displayName: "Publish build number artifact"
            inputs:
              pathToPublish: "$(Build.ArtifactStagingDirectory)/build-number-trident-functional"
              ArtifactName: "build-number-trident-functional"

          - template: ../common/dbCommunication/push-test-results-to-db.yaml
            parameters:
              marinerTridentPipelinesSourceDirectory: '$(Build.SourcesDirectory)'
              junitFilesDirectory: '$(Build.ArtifactStagingDirectory)/filtered-junits'
              isStaging: true
              buildConfigArtifactName: 'build-number-trident-functional'
              architecture: 'x86_64'
              test_suite_name: "trident-functional"
              test_type_prefix: "post-merge"