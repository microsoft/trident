stages:
  - stage: InstallerISO
    displayName: Installer ISO
    dependsOn:
      - BuildingTools
      - ProvisioningOSTemplate
      - TridentTestImg_trident_testimage
      - TridentTestImg_trident_verity_testimage
      - TridentTestImg_containerhost_testimage

    jobs:
      - job: BuildInstallerISO
        displayName: Build
        timeoutInMinutes: 15
        pool:
          type: linux

        variables:
          argusToolkitSourceDirectory: $(Build.SourcesDirectory)/argus-toolkit

          ob_outputDirectory: $(argusToolkitSourceDirectory)/build
          ob_artifactBaseName: installer-iso

        steps:
          - checkout: argus-toolkit

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: "trident-testimg"
              targetPath: "$(System.ArtifactsDirectory)/runtime-image"

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: "trident-verity-testimage"
              targetPath: "$(System.ArtifactsDirectory)/runtime-verity-image"

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: "containerhost-testimage"
              targetPath: "$(System.ArtifactsDirectory)/runtime-containerhost-image"

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: "provisioning-os-template"
              patterns: "*.iso"
              targetPath: "$(System.ArtifactsDirectory)/provision-template"

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: "go-tools"
              patterns: "isogen"
              targetPath: "$(System.ArtifactsDirectory)/isogen"

          - bash: |
              set -eux
              mkdir -p $(argusToolkitSourceDirectory)/build/installer-iso-components/runtime-image
              mkdir -p $(argusToolkitSourceDirectory)/build/installer-iso

              # Boot image
              mv $(System.ArtifactsDirectory)/runtime-image/esp.raw.zst \
                $(argusToolkitSourceDirectory)/build/installer-iso-components/runtime-image/esp.rawzst
              mv $(System.ArtifactsDirectory)/runtime-image/root.raw.zst \
                $(argusToolkitSourceDirectory)/build/installer-iso-components/runtime-image/root.rawzst

              # Verity image for functional testing and e2e testing
              mv $(System.ArtifactsDirectory)/runtime-verity-image/esp.raw.zst \
                $(argusToolkitSourceDirectory)/build/installer-iso-components/runtime-image/verity_esp.rawzst
              mv $(System.ArtifactsDirectory)/runtime-verity-image/boot.raw.zst \
                $(argusToolkitSourceDirectory)/build/installer-iso-components/runtime-image/verity_boot.rawzst
              mv $(System.ArtifactsDirectory)/runtime-verity-image/root.raw.zst \
                $(argusToolkitSourceDirectory)/build/installer-iso-components/runtime-image/verity_root.rawzst
              mv $(System.ArtifactsDirectory)/runtime-verity-image/root-hash.raw.zst \
                $(argusToolkitSourceDirectory)/build/installer-iso-components/runtime-image/verity_roothash.rawzst
              mv $(System.ArtifactsDirectory)/runtime-verity-image/var.raw.zst \
                $(argusToolkitSourceDirectory)/build/installer-iso-components/runtime-image/verity_var.rawzst

              # Containerhost image for e2e testing
              mv $(System.ArtifactsDirectory)/runtime-containerhost-image/esp.raw.zst \
                $(argusToolkitSourceDirectory)/build/installer-iso-components/runtime-image/containerhost_esp.rawzst
              mv $(System.ArtifactsDirectory)/runtime-containerhost-image/root.raw.zst \
                $(argusToolkitSourceDirectory)/build/installer-iso-components/runtime-image/containerhost_root.rawzst

              cp  $(System.ArtifactsDirectory)/provision-template/* \
                  $(argusToolkitSourceDirectory)/build/installer-iso-components/
              cp  $(System.ArtifactsDirectory)/isogen/isogen \
                  $(argusToolkitSourceDirectory)/build/installer-iso-components/
            workingDirectory: $(argusToolkitSourceDirectory)
            displayName: "Setting build materials"

          # Ideally this would only be injected for e2e tests with encryption configuration.
          # See https://dev.azure.com/mariner-org/ECF/_workitems/edit/6750.
          - bash: |
              set -eu
              dd if=/dev/urandom of=$(argusToolkitSourceDirectory)/recovery.key bs=1 count=32
            workingDirectory: $(argusToolkitSourceDirectory)
            displayName: "Create recovery key file for encryption testing"

          - bash: |
              set -eux
              chmod +x $(argusToolkitSourceDirectory)/build/installer-iso-components/isogen
              $(argusToolkitSourceDirectory)/build/installer-iso-components/isogen \
                  -i "$(argusToolkitSourceDirectory)/build/installer-iso-components/provision-template.iso" \
                  -f "$(argusToolkitSourceDirectory)/recovery.key:/recovery.key:400" \
                  -a "$(argusToolkitSourceDirectory)/build/installer-iso-components/runtime-image" \
                  -o "$(argusToolkitSourceDirectory)/build/installer-iso/installer.iso" \
                  -m "$(argusToolkitSourceDirectory)/build/installer-iso/added_files.json"
            workingDirectory: $(argusToolkitSourceDirectory)
            displayName: "Build Installer ISO for testing components"

          - script: sudo tdnf install -y p7zip p7zip-plugins zstd wget
            displayName: "Install native dependencies"

          - bash: |
              set -eux
              7z e $(argusToolkitSourceDirectory)/build/installer-iso/installer.iso
              mv INITRD.IMG initrd.img
              mv VMLINUZ vmlinuz
              mv GRUB.CFG grub.cfg

              wget https://packages.microsoft.com/cbl-mariner/2.0/prod/base/x86_64/Packages/s/shim-15.4-2.cm2.x86_64.rpm
              7z e shim-15.4-2.cm2.x86_64.rpm
              7z e shim-15.4-2.cm2.x86_64.cpio

              wget https://packages.microsoft.com/cbl-mariner/2.0/prod/base/x86_64/Packages/g/grub2-efi-binary-noprefix-2.06-12.cm2.x86_64.rpm
              7z e grub2-efi-binary-noprefix-2.06-12.cm2.x86_64.rpm
              zstd -d grub2-efi-binary-noprefix-2.06-12.cm2.x86_64.cpio.zstd
              7z e grub2-efi-binary-noprefix-2.06-12.cm2.x86_64.cpio
              mv grubx64-noprefix.efi grubx64.efi

              7z a $(argusToolkitSourceDirectory)/build/pxe-artifacts.zip initrd.img vmlinuz grub.cfg bootx64.efi grubx64.efi
            workingDirectory: $(argusToolkitSourceDirectory)
            displayName: "Extract PXE artifacts"
