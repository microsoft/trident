parameters:
  - name: testingRun
    displayName: "Download prebuilt test artifacts"
    type: boolean
    default: false

  - name: baseimgBuildType
    displayName: Base Image build type
    type: string
    values:
      - preview
      - release
    default: "release"

  - name: previewContainerImageBuildId
    displayName: "Build Id of the pipeline run, default will select latest successful run from pipeline 2116 ([AMD64-6-OneBranch]-Prod-BuildImages) with tag 3.0-preview"
    type: string
    default: "latestFromBranch"

  - name: baseimgAzlVersion
    displayName: Base Image AZL version
    type: string
    default: "3.0"

  - name: updateIterationCount
    displayName: "Number of updates to test"
    type: number
    default: 1
  
  - name: rollbackTesting
    displayName: "Run rollback test"
    type: boolean
    default: true

  - name: workers
    displayName: "Number of workers to use"
    type: number
    default: 1

  - name: updateCheckTimeoutInMinutes
    displayName: "Timeout for checking runtime OS deployment in minutes"
    type: number
    default: 25

  - name: verboseLogging
    displayName: "Enable verbose logging"
    type: boolean
    default: false

stages:
  - stage: BuildImages
    displayName: Build Base and Update Images
    dependsOn:
      - ${{ if eq(parameters.testingRun, true) }}:
          - DownloadTestingElements
      - ${{ else }}:
          - GetTridentBinaries_rpms

    jobs:
      - template: generate-ssh-keys.yml

      - template: build-image.yml
        parameters:
          baseimgBuildType: ${{ parameters.baseimgBuildType }}
          label: "Base"
          makeTarget: "build/trident-vm-verity-testimage.qcow2"
          baseimgAzlVersion: ${{ parameters.baseimgAzlVersion }}
          previewContainerImageBuildId: ${{ parameters.previewContainerImageBuildId }}

      - template: build-image.yml
        parameters:
          baseimgBuildType: ${{ parameters.baseimgBuildType }}
          label: "UpdateA"
          makeTarget: "trident-vm-verity-testimage"
          baseimgAzlVersion: ${{ parameters.baseimgAzlVersion }}
          previewContainerImageBuildId: ${{ parameters.previewContainerImageBuildId }}

      - template: build-image.yml
        parameters:
          baseimgBuildType: ${{ parameters.baseimgBuildType }}
          label: "UpdateB"
          makeTarget: "trident-vm-verity-testimage"
          baseimgAzlVersion: ${{ parameters.baseimgAzlVersion }}
          previewContainerImageBuildId: ${{ parameters.previewContainerImageBuildId }}

  - stage: ServicingTesting
    displayName: Servicing Testing
    dependsOn:
      - BuildImages

    jobs:
      - job: UpdateTesting
        displayName: Update Testing
        timeoutInMinutes: ${{ parameters.updateCheckTimeoutInMinutes }}
        pool:
          type: linux
          name: trident-ubuntu-1es-pool-eastus2
          hostArchitecture: amd64
        strategy:
          parallel: ${{ parameters.workers }}

        variables:
          tridentSourceDirectory: $(Build.SourcesDirectory)
          ob_outputDirectory: $(tridentSourceDirectory)/deployment_logs
          ob_artifactBaseName: "update-testing-$(System.JobPositionInPhase)"

        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: image-Base
              targetPath: "$(Build.ArtifactStagingDirectory)/"
            displayName: Download Base Image

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: image-UpdateA
              targetPath: "$(Build.ArtifactStagingDirectory)/update-a"
            displayName: Download Update Image A

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: image-UpdateB
              targetPath: "$(Build.ArtifactStagingDirectory)/update-b"
            displayName: Download Update Image B

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: ssh-keys
              targetPath: "$(Build.ArtifactStagingDirectory)/ssh"
            displayName: Download SSH Keys

          - bash: |
              set -eux
              cp $(Build.ArtifactStagingDirectory)/ssh/id_rsa* ~/.ssh/
              chmod -R 700 ~/.ssh/
              mkdir -p $(ob_outputDirectory)
            displayName: Set up SSH Keys and setup output directory

          - bash: ./scripts/loop-update/deploy-vm.sh
            displayName: "Deploy VM"
            env:
              VERBOSE: ${{ parameters.verboseLogging }}
              ARTIFACTS: $(Build.ArtifactStagingDirectory)
              OUTPUT: $(ob_outputDirectory)
            timeoutInMinutes: 5

          - bash: ./scripts/loop-update/check-deployment.sh
            displayName: "Check that Trident can adopt the deployment"

          - bash: ./scripts/loop-update/loop-update.sh
            env:
              ARTIFACTS: $(Build.ArtifactStagingDirectory)
              OUTPUT: $(ob_outputDirectory)
              VERBOSE: ${{ parameters.verboseLogging }}
              RETRY_COUNT: ${{ parameters.updateIterationCount }}
              EXPECTED_VOLUME: "volume-b"
              ROLLBACK: "false"
            displayName: "Check that Trident can perform A/B update"
            condition: succeeded()

          # E2E rollback test: Trigger an A/B update back into runtime OS A, then cause a rollback
          # by triggering an artificial reboot. Then, check that the firmware performed a rollback
          # into B correctly. Finally, trigger two A/B updates, the first one using the same Host
          # Configuration, and validate that they succeed. Rollback testing will only be run when
          # the rollbackTesting parameter is true. The scaling test logic will set it to false.

          - bash: ./scripts/loop-update/loop-update.sh
            env:
              ARTIFACTS: $(Build.ArtifactStagingDirectory)
              OUTPUT: $(ob_outputDirectory)
              VERBOSE: ${{ parameters.verboseLogging }}
              RETRY_COUNT: 3
              EXPECTED_VOLUME: "volume-b"
              ROLLBACK: "true"
            displayName: "Check that Trident can roll back and perform A/B update after"
            condition: and(succeeded(), eq(${{ parameters.rollbackTesting }}, true))

          # TODO add more e2e tests here (Task 8813)

          - bash: |
              set -eux
              ./scripts/loop-update/fetch-logs.sh $(ob_outputDirectory)/

              . ./scripts/loop-update/common.sh
              sudo virsh shutdown $VM_NAME
              mkdir -p $(ob_outputDirectory)
              sudo zstd -T0 $(Build.ArtifactStagingDirectory)/booted.qcow2
              sudo mv $(Build.ArtifactStagingDirectory)/booted.qcow2.zst $(ob_outputDirectory)/
            workingDirectory: $(tridentSourceDirectory)
            condition: failed()
            displayName: "Publish OS disk"
