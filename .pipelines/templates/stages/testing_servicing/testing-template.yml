parameters:
  - name: updateIterationCount
    displayName: "Number of updates to test"
    type: number
    default: 1

  - name: rollbackTesting
    displayName: "Run rollback test"
    type: boolean
    default: true

  - name: workers
    displayName: "Number of workers to use"
    type: number
    default: 1

  - name: updateCheckTimeoutInMinutes
    displayName: "Timeout for checking runtime OS deployment in minutes"
    type: number
    default: 25

  - name: verboseLogging
    displayName: "Enable verbose logging"
    type: boolean
    default: false

  - name: platform
    displayName: Test platform
    type: string
    values:
      - qemu
      - azure

  - name: flavor
    displayName: Image flavor
    type: string
    values:
      - qemu
      - azure
      - uki

  - name: pool
    displayName: Agent pool
    type: string
    default: "trident-ubuntu-1es-pool-eastus2"

jobs:
  - job: UpdateTesting_${{ parameters.flavor }}
    displayName: Update Testing - ${{ parameters.flavor }}
    timeoutInMinutes: ${{ parameters.updateCheckTimeoutInMinutes }}
    pool:
      type: linux
      name: ${{ parameters.pool }}
      hostArchitecture: amd64
    strategy:
      parallel: ${{ parameters.workers }}

    variables:
      tridentSourceDirectory: $(Build.SourcesDirectory)
      ob_outputDirectory: $(tridentSourceDirectory)/deployment_logs_${{ parameters.flavor }}
      ob_artifactBaseName: "update-testing-${{ parameters.flavor }}-$(System.JobPositionInPhase)"
      IMAGE_DEFINITION: "trident-vm-grub-verity-testimage-$(System.DefinitionId)"
      TEST_RESOURCE_GROUP: trident-vm-servicing-validation-$(Build.BuildId)-$(System.JobPositionInPhase)
      SUBSCRIPTION: 04cdc145-a4f9-42d4-9868-c46d23d0c63f # CoreOS_Mariner_BMP_Staging
      STORAGE_ACCOUNT: "azlinuxbmpstagingeastus2"
      RESOURCE_GROUP: "azlinux_bmp_staging_eastus2"
      SUBNET_ID: /subscriptions/04cdc145-a4f9-42d4-9868-c46d23d0c63f/resourceGroups/trident-vm_servicing-azure-vnet/providers/Microsoft.Network/virtualNetworks/poolpeeringvnet/subnets/default

    steps:
      - bash: |
          echo "##vso[task.setvariable variable=ob_artifactBaseName;]update-testing-${{ parameters.flavor }}-$(printf '%03d' $(System.JobPositionInPhase))"
          echo "##vso[task.setvariable variable=TEST_RESOURCE_GROUP;]trident-vm-servicing-validation-$(Build.BuildId)-$(printf '%03d' $(System.JobPositionInPhase))"
        displayName: "Set variables"

      - ${{ if eq(parameters.platform, 'azure') }}:
        - task: DownloadPipelineArtifact@2
          inputs:
            buildType: current
            artifactName: image-${{ parameters.platform }}-base
            targetPath: "$(Build.ArtifactStagingDirectory)/"
          displayName: Download Base Image

      - ${{ if eq(parameters.platform, 'qemu') }}:
          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              artifactName: image-${{ parameters.flavor }}-base
              targetPath: "$(Build.ArtifactStagingDirectory)/"
            displayName: Download Base Image

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: current
          artifactName: image-${{ parameters.flavor }}-update-a
          targetPath: "$(Build.ArtifactStagingDirectory)/update-a"
        displayName: Download Update Image A

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: current
          artifactName: image-${{ parameters.flavor }}-update-b
          targetPath: "$(Build.ArtifactStagingDirectory)/update-b"
        displayName: Download Update Image B

      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: current
          artifactName: ssh-keys
          targetPath: "$(Build.ArtifactStagingDirectory)/ssh"
        displayName: Download SSH Keys

      - task: DownloadPipelineArtifact@2
        displayName: "Download go-tools"
        inputs:
          buildType: current
          artifactName: "go-tools"
          patterns: |
            netlisten
            storm-trident
          targetPath: "$(tridentSourceDirectory)/bin"

      - bash: |
          set -eux
          chmod +x $(tridentSourceDirectory)/bin/netlisten
          chmod +x $(tridentSourceDirectory)/bin/storm-trident
          cp $(Build.ArtifactStagingDirectory)/ssh/id_rsa* ~/.ssh/
          chmod -R 700 ~/.ssh/
          mkdir -p $(ob_outputDirectory)
        displayName: Set up SSH Keys and setup output directory

      - bash: |
          set -eux

          SUDO="sudo"
          if [ "${{ parameters.platform }}" == "azure" ]; then
            az login --identity
            SUDO=""
          fi

          FLAGS=""
          if [ "${{ parameters.verboseLogging }}" == "True" ]; then
            FLAGS="$FLAGS --verbose"
          fi
          if [ "${{ parameters.flavor }}" != "uki" ]; then
            FLAGS="$FLAGS --secure-boot"
          fi

          $SUDO ./bin/storm-trident run servicing $FLAGS \
            --artifacts-dir $(Build.ArtifactStagingDirectory) \
            --output-path $(ob_outputDirectory) \
            --subscription $(SUBSCRIPTION) \
            --image-definition $(IMAGE_DEFINITION) \
            --storage-account $(STORAGE_ACCOUNT) \
            --storage-account-resource-group $(RESOURCE_GROUP) \
            --test-resource-group $(TEST_RESOURCE_GROUP) \
            --platform ${{ parameters.platform }} \
            --subnet-id $(SUBNET_ID) \
            --ssh-private-key-path $HOME/.ssh/id_rsa \
            --ssh-public-key-path $HOME/.ssh/id_rsa.pub \
            --retry-count ${{ parameters.updateIterationCount }} \
            --rollback-retry-count ${{ parameters.updateIterationCount }} \
            --build-id $(Build.BuildId) \
            --force-cleanup

          set +x
          echo "##vso[task.setvariable variable=STORM_SCENARIO_FINISHED;]true"

        displayName: "Servicing test"
        timeoutInMinutes: 20
        env:
          AZCOPY_AUTO_LOGIN_TYPE: "MSI"
          
      - bash: |
          set -eux

          if [ "${{ parameters.platform }}" == "qemu" ]; then
              sudo zstd -T0 $(Build.ArtifactStagingDirectory)/booted.qcow2
              sudo mv $(Build.ArtifactStagingDirectory)/booted.qcow2.zst $(ob_outputDirectory)/
          fi
          # TODO: use
          # https://learn.microsoft.com/en-us/azure/virtual-machines/linux/download-vhd?tabs=azure-cli
          # for Azure images
        workingDirectory: $(tridentSourceDirectory)
        condition: failed()
        displayName: "Publish logs and OS disk on failure"
        timeoutInMinutes: 5

      - ${{ if eq(parameters.platform, 'azure') }}:
        - bash: |
            set -ex

            # If platform is azure AND the test failed to finish, run cleanup to
            # ensure there are no azure resources left behind
            if [ "${STORM_SCENARIO_FINISHED}" != "true" ]; then
              az login --identity

              FLAGS=""
              if [ "${{ parameters.verboseLogging }}" == "True" ]; then
                FLAGS="$FLAGS --verbose"
              fi

              ./bin/storm-trident run servicing $FLAGS \
                --artifacts-dir $(Build.ArtifactStagingDirectory) \
                --output-path $(ob_outputDirectory) \
                --subscription $(SUBSCRIPTION) \
                --image-definition $(IMAGE_DEFINITION) \
                --storage-account $(STORAGE_ACCOUNT) \
                --storage-account-resource-group $(RESOURCE_GROUP) \
                --test-resource-group $(TEST_RESOURCE_GROUP) \
                --platform ${{ parameters.platform }} \
                --subnet-id $(SUBNET_ID) \
                --ssh-private-key-path $HOME/.ssh/id_rsa \
                --ssh-public-key-path $HOME/.ssh/id_rsa.pub \
                --retry-count ${{ parameters.updateIterationCount }} \
                --rollback-retry-count ${{ parameters.updateIterationCount }} \
                --build-id $(Build.BuildId) \
                --test-case-to-run cleanup-vm
            fi

          displayName: "Cleanup even if timeout"
          timeoutInMinutes: 20
          condition: always()
