parameters:
  - name: buildPurpose
    type: string
    default: "post_merge"
    values:
      - daily
      - pullrequest
      - post_merge
      - validation
      - weekly

  - name: testingRun
    displayName: "Download prebuilt test artifacts"
    type: boolean
    default: false

  - name: runtimeEnv
    displayName: "Runtime environment (host vs container)"
    type: string
    default: "host"
    values:
      - host
      - container

stages:
  - stage: DeploymentTesting_${{ parameters.runtimeEnv }}
    displayName: Deployment VM ${{ parameters.runtimeEnv }} Testing
    dependsOn:
      - ${{ if eq(parameters.testingRun, true) }}:
          - DownloadTestingElements
      - ${{ else }}:
          - BuildingTools
          - ${{ if eq(parameters.runtimeEnv, 'container') }}:
              - BuildTridentContainerImage
              - TridentTestImg_trident_container_installer_testimage
              - TridentTestImg_trident_container_testimage
              - TridentTestImg_trident_container_verity_testimage
          - ${{ else }}:
              - TridentTestImg_trident_split_installer_testimage
              - TridentTestImg_trident_installer_testimage
              - TridentTestImg_trident_testimage
              - TridentTestImg_trident_verity_testimage

    jobs:
      - template: ../testing_common/get-tests.yml
        parameters:
          buildPurpose: ${{ parameters.buildPurpose }}
          deploymentEnvironment: virtualMachine
          runtimeEnv: ${{ parameters.runtimeEnv }}

      - job: Testing
        dependsOn: DefineTests
        timeoutInMinutes: 50
        pool:
          type: linux
          name: trident-ubuntu-1es-pool-eastus2
          hostArchitecture: amd64

        strategy:
          matrix: $[ dependencies.DefineTests.outputs['setConfigurations.matrixConfigurations'] ]

        variables:
          tridentConfigurationName: $(configuration)
          tridentConfigPath: $(tridentSourceDirectory)/e2e_tests/trident_configurations/$(tridentConfigurationName)

          tridentSourceDirectory: $(Build.SourcesDirectory)
          argusToolkitSourceDirectory: $(Build.SourcesDirectory)/argus-toolkit

          ${{ if eq(parameters.runtimeEnv, 'container') }}:
            installerISOName: trident-container-installer-testimage
            testImageName: trident-container-testimage
            verityTestImageName: trident-container-verity-testimage
            downloadTridentContainer: true
          ${{ else }}:
            installerISOName: trident-installer-testimage
            testImageName: trident-testimage
            verityTestImageName: trident-verity-testimage
            downloadTridentContainer: false

          ob_outputDirectory: $(tridentSourceDirectory)/deployment_logs
          ob_artifactBaseName: $(tridentConfigurationName)_${{ parameters.runtimeEnv }}_deployment_log_$(System.JobAttempt)

          netlaunchPort: 4000

        steps:
          - bash: |
              if [ ${{ variables['tridentConfigurationName'] }} == 'split' ]; then
                splitInstallerIsoName="trident-split-installer-testimage"
                echo "setting variable.installerISOName to $splitInstallerIsoName"
                echo "##vso[task.setvariable variable=installerISOName]$splitInstallerIsoName"
              fi
            displayName: Special handle for split test

          - checkout: argus-toolkit
            fetchDepth: 1

          # Download all test images
          - template: ../testing_common/download-test-images.yml
            parameters:
              installerISO: $(installerISOName)
              tridentTestImage: ${{ variables.testImageName }}
              tridentTestImageVerity: ${{ variables.verityTestImageName }}
              downloadTridentContainer: ${{ variables.downloadTridentContainer }}

          - template: netlaunch-prep.yml

          - template: ../testing_common/trident-prep.yml
            parameters:
              tridentSourceDirectory: $(tridentSourceDirectory)
              tridentConfigPath: $(tridentConfigPath)
              runtimeEnv: ${{ parameters.runtimeEnv }}

          - bash: |
              set -eux
              sg libvirt "./virt-deploy create --mem 12 --disks 32,32"
              sg libvirt "./virt-deploy run"
            workingDirectory: $(argusToolkitSourceDirectory)
            displayName: "Running sushy tools for testing deployment with BMC"

          - bash: |
              set -euxo pipefail
              MAX_FAILURES_FLAG=""

              # rerun is expected to fail ONCE
              if [ ${{ variables['tridentConfigurationName'] }} == 'rerun' ]; then 
                MAX_FAILURES_FLAG="--max-failures 1"
              fi

              # memory-constraint-combined is meant to produce ONE failure
              # because the first run modifies the service file and exits
              # prematurely, so that the second run will have the memory
              # constraints applied.
              if [ ${{ variables['tridentConfigurationName'] }} == 'memory-constraint-combined' ]; then 
                MAX_FAILURES_FLAG="--max-failures 1"
              fi

              ./bin/netlaunch \
                  --iso ./artifacts/iso/$(installerISOName).iso \
                  --config $(argusToolkitSourceDirectory)/vm-netlaunch.yaml \
                  --trident $(tridentConfigPath)/trident-config.yaml \
                  --servefolder ./artifacts/test-image \
                  --logstream $MAX_FAILURES_FLAG \
                  --trace-file $(tridentSourceDirectory)/trident-clean-install-metrics.jsonl \
                  --force-color \
                  --full-logstream logstream-full.log \
                  --wait-for-provisioned-state \
                  --port ${{variables.netlaunchPort}} 2>&1 | tee ./clean-install-deployment.log
            workingDirectory: $(tridentSourceDirectory)
            displayName: "ðŸš€ Run netlaunch for testing"
            timeoutInMinutes: 15

          - template: ../testing_common/display-deployment-logs.yml
            parameters:
              deploymentLogPath: $(tridentSourceDirectory)/logstream-full.log
              displayName: "ðŸ“„Display clean install logs"

          - bash: |
              set -ux

              VM_NAME=$(jq -r '.virtualmachines[0].name' $(argusToolkitSourceDirectory)/virt-deploy-metadata.json)
              VM_SERIAL_LOG="/tmp/$VM_NAME-serial0.log"

              until [ -f "$VM_SERIAL_LOG" ]
              do
                  sleep 0.1
              done

              echo "Found VM serial log file: $VM_SERIAL_LOG"
              echo "VM serial log:"

              sudo $(tridentSourceDirectory)/e2e_tests/helpers/wait_for_login.py \
                  -d "$VM_SERIAL_LOG" \
                  -o ./serial.log \
                  -t 250 \
                  -v

              WAIT_FOR_LOGIN_EXITCODE=$?

              mkdir -p $(ob_outputDirectory)
              sudo cp ./serial.log $(ob_outputDirectory)/serial.log

              exit $WAIT_FOR_LOGIN_EXITCODE

            timeoutInMinutes: 5
            condition: succeededOrFailed()
            displayName: "ðŸ“„ Check Runtime OS deployment"

          - bash: |
              set -eux
              HOST_IP=$(jq -r '.virtualmachines[0].ip' $(argusToolkitSourceDirectory)/virt-deploy-metadata.json)
              ssh -o StrictHostKeyChecking=no -i $(tridentSourceDirectory)/e2e_tests/helpers/key testing-user@$HOST_IP \
                'sudo journalctl -u docker.service'
              ssh -o StrictHostKeyChecking=no -i $(tridentSourceDirectory)/e2e_tests/helpers/key testing-user@$HOST_IP \
                'sudo journalctl -u trident-container.service'
            condition: eq('${{ parameters.runtimeEnv }}', 'container')
            displayName: "ðŸ“„ Display Container logs"

          - template: ../testing_common/trident-metrics.yml
            parameters:
              tridentSourceDirectory: $(tridentSourceDirectory)
              tridentConfigPath: $(tridentConfigPath)
              deploymentEnvironment: virtualMachine
              runtimeEnvironment: ${{ parameters.runtimeEnv }}
              tridentConfigurationName: $(tridentConfigurationName)
              metricsFile: $(tridentSourceDirectory)/trident-clean-install-metrics.jsonl
              ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
                kustoTableName: main
              ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
                kustoTableName: dev

          - template: ../testing_common/e2e-test-run.yml
            parameters:
              buildPurpose: ${{ parameters.buildPurpose }}
              deploymentEnvironment: virtualMachine
              tridentConfigurationName: $(tridentConfigurationName)
              hostIp: $(jq -r '.virtualmachines[0].ip' $(argusToolkitSourceDirectory)/virt-deploy-metadata.json)
              runtimeEnv: ${{ parameters.runtimeEnv }}
              tridentConfigPath: $(tridentConfigPath)
              sshKeyPath: $(tridentSourceDirectory)/e2e_tests/helpers/key
              userName: testing-user
              artifactsDirectory: artifacts/test-image
              netlistenPort: ${{variables.netlaunchPort}}

          - bash: |
              set -eux
              sudo virsh shutdown virtdeploy-vm-0
              mkdir -p $(ob_outputDirectory)
              sudo cp /var/lib/libvirt/images/virtdeploy-pool/virtdeploy-vm-0-0-volume.qcow2 $(ob_outputDirectory)/
              sudo zstd -T0 $(ob_outputDirectory)/virtdeploy-vm-0-0-volume.qcow2
              sudo cp $(tridentSourceDirectory)/e2e_tests/helpers/key $(ob_outputDirectory)
              sudo chmod 777 $(ob_outputDirectory)/key
            workingDirectory: $(tridentSourceDirectory)
            condition: failed()
            displayName: "Publish OS disk"
