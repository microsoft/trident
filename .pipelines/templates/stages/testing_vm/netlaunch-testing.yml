parameters:
  - name: buildPurpose
    type: string
    default: "post_merge"
    values:
      - daily
      - pullrequest
      - post_merge
      - validation
      - weekly

  - name: testingRun
    displayName: "Download prebuilt test artifacts"
    type: boolean
    default: false

  - name: runtimeEnv
    displayName: "Runtime environment (host vs container)"
    type: string
    default: "host"
    values:
      - host
      - container

stages:
  - stage: DefineTests_VM_${{ parameters.runtimeEnv }}
    displayName: Test List for VM:${{ parameters.runtimeEnv }}
    jobs:
      - template: ../testing_common/get-tests.yml
        parameters:
          buildPurpose: ${{ parameters.buildPurpose }}
          deploymentEnvironment: virtualMachine
          runtimeEnv: ${{ parameters.runtimeEnv }}

  - stage: DeploymentTesting_${{ parameters.runtimeEnv }}
    displayName: Deployment VM ${{ parameters.runtimeEnv }} Testing
    dependsOn:
      - DefineTests_VM_${{ parameters.runtimeEnv }}
      - ${{ if eq(parameters.testingRun, true) }}:
          - DownloadTestingElements
      - ${{ else }}:
          - BuildingTools
          - ${{ if eq(parameters.runtimeEnv, 'container') }}:
              - BuildTridentContainerImage
              - TridentTestImg_trident_container_installer
              - TridentTestImg_trident_container_testimage
              - TridentTestImg_trident_container_verity_testimage
              - TridentTestImg_trident_container_usrverity_testimage
          - ${{ else }}:
              - TridentTestImg_trident_split_installer
              - TridentTestImg_trident_installer
              - TridentTestImg_trident_testimage
              - TridentTestImg_trident_verity_testimage
              - TridentTestImg_trident_usrverity_testimage

    jobs:
      - job: Testing
        timeoutInMinutes: 50
        pool:
          type: linux
          name: trident-ubuntu-1es-pool-eastus2
          hostArchitecture: amd64

        strategy:
          matrix: $[ stageDependencies.DefineTests_VM_${{ parameters.runtimeEnv }}.DefineTests.outputs['setConfigurations.matrixConfigurations'] ]

        variables:
          # Sourced from the matrix
          - name: tridentConfigurationName
            value: $(configuration)

          - name: tridentSourceDirectory
            value: $(Build.SourcesDirectory)

          - name: tridentConfigPath
            value: $(tridentSourceDirectory)/tests/e2e_tests/trident_configurations/$(tridentConfigurationName)

          - ${{ if eq(parameters.runtimeEnv, 'container') }}:
              - name: installerISOName
                value: trident-container-installer
              - name: testImageName
                value: trident-container-testimage
              - name: verityTestImageName
                value: trident-container-verity-testimage
              - name: usrVerityTestImageName
                value: trident-container-usrverity-testimage
              - name: downloadTridentContainer
                value: true
          - ${{ else }}:
              - name: installerISOName
                value: trident-installer
              - name: testImageName
                value: trident-testimage
              - name: verityTestImageName
                value: trident-verity-testimage
              - name: usrVerityTestImageName
                value: trident-usrverity-testimage
              - name: downloadTridentContainer
                value: false

          - name: ob_outputDirectory
            value: $(tridentSourceDirectory)/deployment_logs
          - name: ob_artifactBaseName
            value: $(tridentConfigurationName)_${{ parameters.runtimeEnv }}_deployment_log_$(System.JobAttempt)

          - name: netlaunchPort
            value: 4000

          # Provides: ACR_NAME
          - group: trident_e2e_params

        steps:
          - bash: |
              if [ ${{ variables['tridentConfigurationName'] }} == 'split' ]; then
                splitInstallerIsoName="trident-split-installer"
                echo "setting variable.installerISOName to $splitInstallerIsoName"
                echo "##vso[task.setvariable variable=installerISOName]$splitInstallerIsoName"
              fi
            displayName: Special handle for split test

          # Download all test images
          - template: ../testing_common/download-test-images.yml
            parameters:
              installerISO: $(installerISOName)
              tridentTestImage: ${{ variables.testImageName }}
              tridentTestImageVerity: ${{ variables.verityTestImageName }}
              downloadTridentContainer: ${{ variables.downloadTridentContainer }}
              tridentTestImageUsrVerity: ${{ variables.usrVerityTestImageName }}

          # Push (regular or container) testimage to ACR
          - template: ../common_tasks/push-to-acr.yml
            parameters:
              imageName: ${{ variables.testImageName }}
              config: ${{ variables.tridentConfigurationName }}
              deploymentEnvironment: "virtualMachine"

          - template: netlaunch-prep.yml

          - template: ../testing_common/trident-prep.yml
            parameters:
              tridentSourceDirectory: $(tridentSourceDirectory)
              tridentConfigPath: $(tridentConfigPath)
              runtimeEnv: ${{ parameters.runtimeEnv }}
              config: ${{ variables.tridentConfigurationName }}
              imageName: ${{ variables.testImageName }}

          - bash: |
              set -eux

              # Disable virtlogd rollover by setting max_size to 0
              cat /etc/libvirt/virtlogd.conf
              echo "max_size = 0" | sudo tee -a /etc/libvirt/virtlogd.conf
              cat /etc/libvirt/virtlogd.conf
              sudo systemctl restart virtlogd.socket

              ./tools/virt-deploy create --mem 12 --disks 32,32
            workingDirectory: $(tridentSourceDirectory)
            displayName: "Creating virt-deploy VM"

          - bash: |
              set -euxo pipefail
              MAX_FAILURES_FLAG=""

              # rerun and memory-constraint-combined are expected to fail ONCE.
              # In latter test, first run modifies the service file and exits
              # prematurely, so that the second run has memory constraints
              # applied.
              if [[ "${{ variables['tridentConfigurationName'] }}" == 'rerun' || "${{ variables['tridentConfigurationName'] }}" == 'memory-constraint-combined' ]]; then
                MAX_FAILURES_FLAG="--max-failures 1"
              fi

              # If this test will run in a container and encryption is enabled,
              # then overwrite the PCRs to exclude PCR 7.
              TRIDENT_CONFIG="$(tridentConfigPath)/trident-config.yaml"
              ENCRYPTION_PRESENT=$(sudo yq 'has("storage") and .storage.has("encryption")' "$TRIDENT_CONFIG")
              if [[ "${{ parameters.runtimeEnv }}" == 'container' && "$ENCRYPTION_PRESENT" == 'true' ]]; then
                sudo yq -i '
                  .storage.encryption.pcrs |=
                    map(select(. != "secure-boot-policy" and . != 7))
                ' "$TRIDENT_CONFIG"
              fi

              # Enable SecureBoot for all E2E tests.
              SECURE_BOOT="--secure-boot"

              # If this is a usr-verity image, a signing certificate must be
              # set via --signing-cert; otherwise, set it to an empty string.
              # This can also be used for sysext signing.
              IMAGE_URL=$(sudo yq '.image.url' "$TRIDENT_CONFIG")
              CERT_SEARCH_PATH="$(System.ArtifactsDirectory)/usrverity-testimage"
              CA_CERT_PATH="$CERT_SEARCH_PATH/ca_cert.pem"
              if [[ "$IMAGE_URL" == *usrverity.cosi ]] && [ -f "$CA_CERT_PATH" ]; then
                SIGNING_CERT="--signing-cert $CA_CERT_PATH"
              else
                SIGNING_CERT=""
              fi

              ./bin/netlaunch \
                  --iso ./artifacts/iso/$(installerISOName).iso \
                  --config $(tridentSourceDirectory)/tools/vm-netlaunch.yaml \
                  --trident $(tridentConfigPath)/trident-config.yaml \
                  --servefolder ./artifacts/test-image \
                  --logstream \
                  $MAX_FAILURES_FLAG \
                  --trace-file $(tridentSourceDirectory)/trident-clean-install-metrics.jsonl \
                  --force-color \
                  --full-logstream logstream-full.log \
                  --wait-for-provisioned-state \
                  $SECURE_BOOT \
                  $SIGNING_CERT \
                  --port ${{variables.netlaunchPort}} 2>&1 | tee ./clean-install-deployment.log
            workingDirectory: $(tridentSourceDirectory)
            displayName: "ðŸš€ Run netlaunch for testing"
            timeoutInMinutes: 20

          - template: ../testing_common/display-deployment-logs.yml
            parameters:
              deploymentLogPath: $(tridentSourceDirectory)/logstream-full.log
              displayName: "ðŸ“„Display clean install logs"

          - bash: |
              set -ux

              VM_NAME=$(jq -r '.virtualmachines[0].name' $(tridentSourceDirectory)/tools/virt-deploy-metadata.json)
              VM_SERIAL_LOG="/tmp/$VM_NAME-serial0.log"

              until [ -f "$VM_SERIAL_LOG" ]
              do
                  sleep 0.1
              done

              echo "Found VM serial log file: $VM_SERIAL_LOG"
              echo "VM serial log:"

              sudo $(tridentSourceDirectory)/tests/e2e_tests/helpers/wait_for_login.py \
                  -d "$VM_SERIAL_LOG" \
                  -o ./serial.log \
                  -t 250 \
                  -v

              WAIT_FOR_LOGIN_EXITCODE=$?

              mkdir -p $(ob_outputDirectory)
              sudo cp ./serial.log $(ob_outputDirectory)/serial.log

              exit $WAIT_FOR_LOGIN_EXITCODE

            timeoutInMinutes: 5
            condition: succeededOrFailed()
            displayName: "ðŸ“„ Check Runtime OS deployment"

          - bash: |
              set -eux

              HOST_IP=$(jq -r '.virtualmachines[0].ip' $(tridentSourceDirectory)/tools/virt-deploy-metadata.json)
              ./bin/storm-trident helper check-selinux \
                  "$(tridentSourceDirectory)/tests/e2e_tests/helpers/key" \
                  "$HOST_IP" \
                  "testing-user" \
                  "${{ parameters.runtimeEnv }}" \
                  --audit-file $(ob_outputDirectory)/audit.log \
            timeoutInMinutes: 5
            condition: eq('${{ parameters.runtimeEnv }}', 'host')
            displayName: "ðŸ“„ Check for SELinux failures"

          - bash: |
              set -eux
              HOST_IP=$(jq -r '.virtualmachines[0].ip' $(tridentSourceDirectory)/tools/virt-deploy-metadata.json)
              ssh -o StrictHostKeyChecking=no -i $(tridentSourceDirectory)/tests/e2e_tests/helpers/key testing-user@$HOST_IP \
                'sudo journalctl -u docker.service'
              ssh -o StrictHostKeyChecking=no -i $(tridentSourceDirectory)/tests/e2e_tests/helpers/key testing-user@$HOST_IP \
                'sudo journalctl -u trident-container.service'
            condition: eq('${{ parameters.runtimeEnv }}', 'container')
            displayName: "ðŸ“„ Display Container logs"

          - bash: |
              set -eux
              HOST_IP=$(jq -r '.virtualmachines[0].ip' $(tridentSourceDirectory)/tools/virt-deploy-metadata.json)
              ./bin/storm-trident helper boot-metrics \
                  "$(tridentSourceDirectory)/tests/e2e_tests/helpers/key" \
                  "$HOST_IP" \
                  "testing-user" \
                  "${{ parameters.runtimeEnv }}" \
                  --metrics-file $(tridentSourceDirectory)/trident-clean-install-metrics.jsonl \
                  --metrics-operation install
            displayName: "Create boot metrics for booting into runtime OS"

          - template: ../testing_common/trident-metrics.yml
            parameters:
              tridentSourceDirectory: $(tridentSourceDirectory)
              tridentConfigPath: $(tridentConfigPath)
              deploymentEnvironment: virtualMachine
              runtimeEnvironment: ${{ parameters.runtimeEnv }}
              tridentConfigurationName: $(tridentConfigurationName)
              metricsFile: $(tridentSourceDirectory)/trident-clean-install-metrics.jsonl
              ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
                kustoTableName: main
              ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
                kustoTableName: dev

          - template: ../testing_common/e2e-test-run.yml
            parameters:
              buildPurpose: ${{ parameters.buildPurpose }}
              deploymentEnvironment: virtualMachine
              tridentConfigurationName: $(tridentConfigurationName)
              hostIp: $(jq -r '.virtualmachines[0].ip' $(tridentSourceDirectory)/tools/virt-deploy-metadata.json)
              runtimeEnv: ${{ parameters.runtimeEnv }}
              tridentConfigPath: $(tridentConfigPath)
              sshKeyPath: $(tridentSourceDirectory)/tests/e2e_tests/helpers/key
              userName: testing-user
              artifactsDirectory: artifacts/test-image
              netlistenPort: ${{variables.netlaunchPort}}

          - template: ../common_tasks/remove-from-acr.yml
            parameters:
              repository: ${{ variables.testImageName }}
              config: ${{ variables.tridentConfigurationName }}

          - bash: |
              set -eux
              sudo virsh shutdown virtdeploy-vm-0
              mkdir -p $(ob_outputDirectory)
              sudo cp /var/lib/libvirt/images/virtdeploy-pool/virtdeploy-vm-0-0-volume.qcow2 $(ob_outputDirectory)/
              sudo zstd -T0 $(ob_outputDirectory)/virtdeploy-vm-0-0-volume.qcow2
              sudo cp $(tridentSourceDirectory)/tests/e2e_tests/helpers/key $(ob_outputDirectory)
              sudo chmod 777 $(ob_outputDirectory)/key
            workingDirectory: $(tridentSourceDirectory)
            condition: failed()
            displayName: "Publish OS disk"
