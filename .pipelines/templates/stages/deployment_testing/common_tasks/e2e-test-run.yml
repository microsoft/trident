parameters:
  - name: buildPurpose
    type: string
    default: validation

  - name: tridentConfigurationName
    type: string
    default: ""

  - name: deploymentEnvironment
    type: string
    default: virtualMachine

  - name: hostIp
    type: string
    default: ""

  - name: tridentConfigPath
    type: string

  - name: jUnitXMLIdentifier
    type: string
    default: trident_e2e_tests

steps:
  - bash: |
      set -eux
      sudo pip3 install pytest
      sudo pip3 install fabric
    displayName: "Installing dependencies for E2E tests"
 
  - bash: |
      set -eux
      sshKeyPath="$(Build.SourcesDirectory)/e2e_tests/helpers/key"
      # Check SSH connection and wait for 2 minutes if it fails
      for i in {1..24}; do
        ssh -q -o "StrictHostKeyChecking=no" -i "$sshKeyPath" testing-user@${{ parameters.hostIp }} exit
        SSH_EXIT_CODE=$?
        if [ $SSH_EXIT_CODE -eq 0 ]; then
          echo "SSH connection successful. VM is up and running."
            break
        else
            echo "SSH connection failed. Waiting for 5 seconds before retrying..."
            sleep 5
        fi
      done
      ls -ltr $(System.ArtifactsDirectory)
      verityExists=$(sudo yq e '.hostConfiguration.storage.verity != null' "${{ parameters.tridentConfigPath }}/trident-config.yaml")
      abupdateExists=$(sudo yq e '.hostConfiguration.storage.abUpdate != null' "${{ parameters.tridentConfigPath }}/trident-config.yaml") 
      if [ "$verityExists" == true ] && [ "$abupdateExists" == true ]; then
          artifactsDirectory="$(System.ArtifactsDirectory)/trident-verity-testimage"
          destinationDirectory="/run"
          ssh -o StrictHostKeyChecking=no -i "$sshKeyPath" testing-user@${{ parameters.hostIp }} "sudo chown testing-user:testing-user $destinationDirectory && sudo chmod 755 $destinationDirectory"
          scp -o StrictHostKeyChecking=no -i "$sshKeyPath" "$artifactsDirectory/boot.raw.zst" testing-user@${{ parameters.hostIp }}:"$destinationDirectory/boot_v2.rawzst"
          scp -o StrictHostKeyChecking=no -i "$sshKeyPath" "$artifactsDirectory/esp.raw.zst" testing-user@${{ parameters.hostIp }}:"$destinationDirectory/esp_v2.rawzst"
          scp -o StrictHostKeyChecking=no -i "$sshKeyPath" "$artifactsDirectory/root.raw.zst" testing-user@${{ parameters.hostIp }}:"$destinationDirectory/root_v2.rawzst"
          scp -o StrictHostKeyChecking=no -i "$sshKeyPath" "$artifactsDirectory/root-hash.raw.zst" testing-user@${{ parameters.hostIp }}:"$destinationDirectory/root-hash_v2.rawzst"
          scp -o StrictHostKeyChecking=no -i "$sshKeyPath" "$artifactsDirectory/var.raw.zst" testing-user@${{ parameters.hostIp }}:"$destinationDirectory/var_v2.rawzst"
      elif [ "$abupdateExists" == true ]; then
          artifactsDirectory="$(System.ArtifactsDirectory)/trident-testimg"
          destinationDirectory="/abupdate"
          ssh -o StrictHostKeyChecking=no -i "$sshKeyPath" testing-user@${{ parameters.hostIp }} "sudo mkdir -p $destinationDirectory"
          ssh -o StrictHostKeyChecking=no -i "$sshKeyPath" testing-user@${{ parameters.hostIp }} "sudo chown testing-user:testing-user $destinationDirectory && sudo chmod 755 $destinationDirectory"
          scp -o StrictHostKeyChecking=no -i "$sshKeyPath" "$artifactsDirectory/esp.raw.zst" testing-user@${{ parameters.hostIp }}:"$destinationDirectory/esp_v2.rawzst"
          scp -o StrictHostKeyChecking=no -i "$sshKeyPath" "$artifactsDirectory/root.raw.zst" testing-user@${{ parameters.hostIp }}:"$destinationDirectory/root_v2.rawzst"
      fi
    displayName: "Copy runtime images to VM for AB update test" 

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --configuration ${{ parameters.tridentConfigPath }}
    workingDirectory: ./e2e_tests
    displayName: "Trident E2E tests"

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_$(System.JobAttempt).junit.xml
      testRunTitle: ${{ parameters.deploymentEnvironment }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_$(System.JobAttempt)
    displayName: Publish test results
