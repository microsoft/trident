parameters:
  - name: buildPurpose
    type: string
    default: "post_merge"
    values:
      - daily
      - pullrequest
      - post_merge
      - validation

  - name: stageDependencies
    type: object
    default:
      - BuildingTools
      - TridentTestImg_trident_installer_testimage
      - TridentTestImg_trident_testimage
      - TridentTestImg_trident_verity_testimage

  - name: updateRuntimeOSTrident
    type: boolean
    default: false

stages:
  - stage: FunctionalTesting
    displayName: Functional Testing
    dependsOn: ${{ parameters.stageDependencies }}
    jobs:
      - job: FunctionalTests
        displayName: Functional Tests
        timeoutInMinutes: 45
        pool:
          type: linux
          name: trident-ubuntu-1es-pool-eastus2
          hostArchitecture: amd64

        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/build
          argusToolkitSourceDirectory: $(Build.SourcesDirectory)/argus-toolkit

        steps:
          - checkout: argus-toolkit
            fetchDepth: 1
          - checkout: platform-tests
            fetchDepth: 1

          - template: netlaunch-prep.yml

          - bash: |
              set -eux

              sudo apt install -y protobuf-compiler clang bc
              sudo apt remove python3-openssl
              pip install pytest assertpy paramiko pyopenssl
            displayName: Install dependencies
            retryCountOnTaskFailure: 3

          - bash: |
              set -eux

              ssh-keygen -t rsa -b 2048 -f ~/.ssh/id_rsa -q -N ""
            displayName: Set up SSH Keys
            retryCountOnTaskFailure: 3

          - template: ../../common_tasks/rustup.yml

          - bash: |
              set -eux

              # Copy files from platform-tests to functional_tests
              cp platform-tests/tools/marinerhci_test_tools/node_interface.py functional_tests/
              cp platform-tests/tools/marinerhci_test_tools/ssh_node.py functional_tests/

              # Run the core of the functional tests, which means only
              # rebuilding the test binaries and invoking pytest. The regular
              # target is meant for local use and does extra setup not required
              # here.
              sg libvirt "make functional-test-core INSTALLER_ISO_PATH=$(System.ArtifactsDirectory)/trident-installer-testimage.iso ARGUS_TOOLKIT_PATH=argus-toolkit"
            displayName: Execute Functional Tests

          - template: ../../common_tasks/coverage.yml
            parameters:
              codeCoverageBaseline: 78 # Unit + functional tests
              executeUnitTests: true
              installNativeDependencies: false
              rustup: false

          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: "JUnit"
              testResultsFiles: "$(Build.SourcesDirectory)/target/trident_functional_tests.xml"

          - bash: |
              set -eux

              sg libvirt "make patch-functional-test INSTALLER_ISO_PATH=$(System.ArtifactsDirectory)/trident-installer-testimg.iso ARGUS_TOOLKIT_PATH=argus-toolkit"
            displayName: Rerun Functional Tests

  - stage: DeploymentTesting
    displayName: Deployment Testing
    dependsOn: ${{ parameters.stageDependencies }}

    jobs:
      - template: ../common_tasks/get-tests.yml
        parameters:
          buildPurpose: ${{ parameters.buildPurpose }}
          deploymentEnvironment: virtualMachine

      - job: Testing
        dependsOn: DefineTests
        timeoutInMinutes: 25
        pool:
          type: linux
          name: trident-ubuntu-1es-pool-eastus2
          hostArchitecture: amd64

        strategy:
          matrix: $[ dependencies.DefineTests.outputs['setConfigurations.matrixConfigurations'] ]

        variables:
          tridentConfigurationName: $(configuration)

          tridentSourceDirectory: $(Build.SourcesDirectory)
          argusToolkitSourceDirectory: $(Build.SourcesDirectory)/argus-toolkit

          tridentConfigPath: $(tridentSourceDirectory)/e2e_tests/trident_configurations/$(tridentConfigurationName)
          ob_outputDirectory: $(tridentSourceDirectory)/deployment_logs
          ob_artifactBaseName: $(tridentConfigurationName)_deployment_log_$(System.JobAttempt)

        steps:
          - checkout: argus-toolkit
            fetchDepth: 1

          - template: netlaunch-prep.yml

          - template: ../common_tasks/trident-prep.yml
            parameters:
              tridentSourceDirectory: $(tridentSourceDirectory)
              tridentConfigPath: $(tridentConfigPath)
              updateRuntimeOSTrident: ${{ parameters.updateRuntimeOSTrident }}

          - bash: |
              set -eux
              sg libvirt "./virt-deploy create -d 32,32"
              sg libvirt "./virt-deploy run"
            workingDirectory: $(argusToolkitSourceDirectory)
            displayName: "Running sushy tools for testing deployment with BMC"

          - bash: |
              set -eux

              # rerun is expected to fail ONCE
              MAX_FAILURES_FLAG=""
              if [ ${{ variables['tridentConfigurationName'] }} == 'rerun' ]; then
                MAX_FAILURES_FLAG="--max-failures 1"
              fi

              echo "Netlaunch output:" > ./deployment.log
              ./bin/netlaunch \
                  --iso $(System.ArtifactsDirectory)/trident-installer-testimage.iso \
                  --config $(argusToolkitSourceDirectory)/vm-netlaunch.yaml \
                  --trident $(tridentConfigPath)/trident-config.yaml \
                  --servefolder ./artifacts/test-image \
                  --logstream $MAX_FAILURES_FLAG \
                  --trace-file trident-metrics.jsonl \
                  --log-trace --force-color
            timeoutInMinutes: 7
            workingDirectory: $(tridentSourceDirectory)
            displayName: "Run netlaunch for testing"

          - bash: |
              set -ux

              VM_NAME=$(jq -r '.virtualmachines[0].name' $(argusToolkitSourceDirectory)/virt-deploy-metadata.json)
              VM_SERIAL_LOG="/tmp/$VM_NAME-serial0.log"

              until [ -f "$VM_SERIAL_LOG" ]
              do
                  sleep 0.1
              done

              echo "Found VM serial log file: $VM_SERIAL_LOG"
              echo "VM serial log:"

              sudo $(tridentSourceDirectory)/e2e_tests/helpers/wait_for_login.py \
                  -d "$VM_SERIAL_LOG" \
                  -o ./serial.log \
                  -t 250

              WAIT_FOR_LOGIN_EXITCODE=$?

              mkdir -p $(ob_outputDirectory)
              sudo cp ./serial.log $(ob_outputDirectory)/serial.log

              exit $WAIT_FOR_LOGIN_EXITCODE

            timeoutInMinutes: 5
            condition: succeededOrFailed()
            displayName: "Check Runtime OS deployment"

          - template: ../common_tasks/trident-metrics.yml
            parameters:
              tridentSourceDirectory: $(tridentSourceDirectory)
              tridentConfigPath: $(tridentConfigPath)
              deploymentEnvironment: virtualMachine
              tridentConfigurationName: $(tridentConfigurationName)
              metricsFile: $(tridentSourceDirectory)/trident-metrics.jsonl
              runOnFailure: true
              ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
                kustoTableName: main
              ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
                kustoTableName: dev

          - template: ../common_tasks/e2e-test-run.yml
            parameters:
              buildPurpose: ${{ parameters.buildPurpose }}
              deploymentEnvironment: virtualMachine
              tridentConfigurationName: $(tridentConfigurationName)
              hostIp: $(jq -r '.virtualmachines[0].ip' $(argusToolkitSourceDirectory)/virt-deploy-metadata.json)
              tridentConfigPath: $(tridentConfigPath)
              sshKeyPath: $(tridentSourceDirectory)/e2e_tests/helpers/key
              userName: testing-user
              artifactsDirectory: artifacts/test-image

          - template: ../common_tasks/trident-rebuild.yml
            parameters:
              hostIp: $(jq -r '.virtualmachines[0].ip' $(argusToolkitSourceDirectory)/virt-deploy-metadata.json)
              sshKeyPath: $(tridentSourceDirectory)/e2e_tests/helpers/key
              userName: testing-user 
   
          - bash: |
              set -eux
              sudo virsh shutdown virtdeploy-vm-0
              mkdir -p $(ob_outputDirectory)
              sudo cp /var/lib/libvirt/images/virtdeploy-pool/virtdeploy-vm-0-0-volume.qcow2 $(ob_outputDirectory)/
              sudo zstd -T0 $(ob_outputDirectory)/virtdeploy-vm-0-0-volume.qcow2
            workingDirectory: $(tridentSourceDirectory)
            condition: failed()
            displayName: "Publish OS disk"
