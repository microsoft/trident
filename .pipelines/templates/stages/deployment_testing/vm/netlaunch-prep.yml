steps:
  - task: DownloadPipelineArtifact@2
    displayName: "Download installer-iso/installer.iso"
    inputs:
      buildType: current
      artifactName: "trident-installer-testimage"
      targetPath: "$(System.ArtifactsDirectory)/"

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: current
      artifactName: "trident-testimage"
      targetPath: "$(System.ArtifactsDirectory)/testimage"

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: current
      artifactName: "trident-verity-testimage"
      targetPath: "$(System.ArtifactsDirectory)/verity-testimage"

  - template: ../common_tasks/rename-test-images.yml
    parameters:
      targetDirectory: artifacts/test-image
      testImageDir: $(System.ArtifactsDirectory)/testimage
      verityTestImageDir: $(System.ArtifactsDirectory)/verity-testimage

  - task: DownloadPipelineArtifact@2
    displayName: "Download go-tools/netlaunch"
    inputs:
      buildType: current
      artifactName: "go-tools"
      patterns: "netlaunch"
      targetPath: "$(Build.SourcesDirectory)/bin/"

  - bash: |
      set -eux

      # Print OS version:
      cat /etc/os-release

      echo "Context:"
      pwd
      ls -la
    displayName: "Print pipeline context"

  - bash: |
      set -eux

      chmod +x "$(Build.SourcesDirectory)/bin/netlaunch"
    displayName: "Make netlaunch executable"

  - bash: |
      set -eux

       # Install swtpm:
      if grep UBUNTU_CODENAME=focal /etc/os-release -q; then
          sudo add-apt-repository ppa:stefanberger/swtpm-focal -y
          sudo apt-get update
      fi
    displayName: "Install SWTPM PPA on Ubuntu 20.04"
    retryCountOnTaskFailure: 3

  - bash: |
      # Install Docker if it isn't installed
      if ! which docker ; then
        curl -fsSL https://get.docker.com | sudo bash
      fi
    displayName: "Install Docker"
    retryCountOnTaskFailure: 3

  - bash: |
      set -eux

      sudo NEEDRESTART_MODE=a apt-get install -y \
          swtpm \
          swtpm-tools \
          bridge-utils \
          virt-manager \
          qemu-efi \
          qemu-kvm \
          libvirt-daemon-system \
          libvirt-clients \
          python3-libvirt \
          ovmf \
          openssl \
          python3-netifaces \
          python3-docker \
          python3-bcrypt \
          python3-jinja2 \
          zstd
    displayName: Install virt-deploy dependencies
    retryCountOnTaskFailure: 3

  - bash: |
      set -eux

      sudo usermod -aG docker $USER
      sudo usermod -a -G libvirt $USER

      mkdir -p ~/.config/libvirt
      cat << EOF > ~/.config/libvirt/libvirt.conf
      uri_default = "qemu:///system"
      EOF
    displayName: "Configure virt-deploy"
