steps:
  - template: ../../common_tasks/install-clamav.yml

  - task: DownloadPipelineArtifact@2
    displayName: "Download installer-iso/installer.iso"
    inputs:
      buildType: current
      artifactName: "trident-installer-testimage"
      targetPath: "$(System.ArtifactsDirectory)/"

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: current
      artifactName: "trident-testimage"
      targetPath: "$(System.ArtifactsDirectory)/testimage"

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: current
      artifactName: "trident-verity-testimage"
      targetPath: "$(System.ArtifactsDirectory)/verity-testimage"

  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: current
      artifactName: "containerhost-testimage"
      targetPath: "$(System.ArtifactsDirectory)/containerhost-testimage"

  - bash: |
      set -eux
      mkdir -p artifacts/test-image

      # Boot image
      mv $(System.ArtifactsDirectory)/testimage/esp.raw.zst artifacts/test-image/esp.rawzst
      mv $(System.ArtifactsDirectory)/testimage/root.raw.zst artifacts/test-image/root.rawzst

      # Verity image for functional testing and e2e testing
      mv $(System.ArtifactsDirectory)/verity-testimage/esp.raw.zst artifacts/test-image/verity_esp.rawzst
      mv $(System.ArtifactsDirectory)/verity-testimage/boot.raw.zst artifacts/test-image/verity_boot.rawzst
      mv $(System.ArtifactsDirectory)/verity-testimage/root.raw.zst artifacts/test-image/verity_root.rawzst
      mv $(System.ArtifactsDirectory)/verity-testimage/root-hash.raw.zst artifacts/test-image/verity_roothash.rawzst
      mv $(System.ArtifactsDirectory)/verity-testimage/var.raw.zst artifacts/test-image/verity_var.rawzst

      # Containerhost image for e2e testing
      mv $(System.ArtifactsDirectory)/containerhost-testimage/esp.raw.zst artifacts/test-image/containerhost_esp.rawzst
      mv $(System.ArtifactsDirectory)/containerhost-testimage/root.raw.zst artifacts/test-image/containerhost_root.rawzst
    displayName: "Rename images"

  - task: DownloadPipelineArtifact@2
    displayName: "Download go-tools/netlaunch"
    inputs:
      buildType: current
      artifactName: "go-tools"
      patterns: "netlaunch"
      targetPath: "$(Build.SourcesDirectory)/bin/"

  - bash: |
      set -eux

      # Print OS version:
      cat /etc/os-release

      echo "Context:"
      pwd
      ls -la
    displayName: "Print pipeline context"

  - bash: |
      set -eux

      chmod +x "$(Build.SourcesDirectory)/bin/netlaunch"
    displayName: "Make netlaunch executable"

  - bash: |
      set -eux

       # Install swtpm:
      if grep UBUNTU_CODENAME=focal /etc/os-release -q; then
          sudo add-apt-repository ppa:stefanberger/swtpm-focal -y
          sudo apt-get update
      fi
    displayName: "Install SWTPM PPA on Ubuntu 20.04"

  - bash: |
      set -eux

      sudo apt-get install -y swtpm swtpm-tools

      curl -fsSL https://get.docker.com | sudo bash
      sudo NEEDRESTART_MODE=a apt-get install -y virt-manager qemu-efi python3-libvirt ovmf openssl python3-netifaces python3-docker python3-bcrypt python3-jinja2

      sudo usermod -aG docker $USER
      sudo usermod -a -G libvirt $USER

      mkdir -p ~/.config/libvirt
      cat << EOF > ~/.config/libvirt/libvirt.conf
      uri_default = "qemu:///system"
      EOF
    displayName: "Configure virt-deploy"
