parameters:
  - name: "config"
    displayName: "Trident configuration"
    type: string

  - name: "deploymentEnvironment"
    type: string
    values:
      - virtualMachine
      - bareMetal

steps:
  - bash: |
      set -eux

      if [ ${{ parameters.config }} != 'misc' ]; then
        echo "Skipping step. Configuration is '${{ parameters.config }}'."
        exit 0
      fi

      # Create two sysexts and confexts each.
      for i in 1 2; do
        # Create sysext extension-release file
        mkdir -p sysext-image-$i/usr/lib/extension-release.d
        cat << EOF >>  sysext-image-$i/usr/lib/extension-release.d/extension-release.test-sysext
        ID=_any
        SYSEXT_ID=test-sysext
        SYSEXT_VERSION_ID=$i.0.0
        ARCHITECTURE=x86-64
        EOF

        # Create confext extension-release file
        mkdir -p confext-image-$i/etc/extension-release.d
        cat << EOF >>  confext-image-$i/etc/extension-release.d/extension-release.test-confext
        ID=_any
        CONFEXT_ID=test-confext
        CONFEXT_VERSION_ID=$i.0.0
        ARCHITECTURE=x86-64
        EOF

        # Create DDI files
        mksquashfs sysext-image-$i test-sysext-$i.raw -comp xz -Xbcj x86 -noappend -no-xattrs
        mksquashfs confext-image-$i test-confext-$i.raw -comp xz -Xbcj x86 -noappend -no-xattrs
      done

      # Verify the images were created
      ls -la *.raw
      echo "Extension images created successfully!"

    displayName: "Build test sysext and confext images"
    workingDirectory: $(Build.SourcesDirectory)
    retryCountOnTaskFailure: 3

  - task: AzureCLI@2
    inputs:
      azureSubscription: trident-dev-acr-write-umi-ECF
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -eux

        if [ ${{ parameters.config }} != 'misc' ]; then
          echo "Skipping step. Configuration is '${{ parameters.config }}'."
          exit 0
        fi

        # Login to ACR
        az acr login -n $(ACR_NAME)

        sysext_repository_name="sysext"
        confext_repository_name="confext"
        build_id="$(Build.BuildId)"

        cd $(Build.SourcesDirectory)

        tag_base="v${build_id}.${{ parameters.config }}.${{ parameters.deploymentEnvironment }}"
        for version in 1 2; do
          sysext_filename="test-sysext-${version}.raw"
          confext_filename="test-confext-${version}.raw"

          tag="$tag_base.${version}"

          if [[ -f "$sysext_filename" ]]; then
            echo "Pushing $sysext_filename with tag $tag to $(ACR_NAME).azurecr.io"
            oras push $(ACR_NAME).azurecr.io/$sysext_repository_name:$tag "$sysext_filename"
            sleep 3
            echo "Verifying $sysext_filename was pushed successfully..."
            az acr repository show --name $(ACR_NAME) --image ${sysext_repository_name}:${tag}
          else
            echo "File $sysext_filename not found"
          fi
          if [[ -f "$confext_filename" ]]; then
            echo "Pushing $confext_filename with tag $tag to $(ACR_NAME).azurecr.io"
            oras push $(ACR_NAME).azurecr.io/$confext_repository_name:$tag "$confext_filename"
            sleep 3
            echo "Verifying $confext_filename was pushed successfully..."
            az acr repository show --name $(ACR_NAME) --image ${confext_repository_name}:${tag}
          else
            echo "File $confext_filename not found"
          fi
        done

        # Set variable for sysext and confext repositories
        echo "##vso[task.setvariable variable=SYSEXT_REPO]$sysext_repository_name"
        echo "##vso[task.setvariable variable=CONFEXT_REPO]$confext_repository_name"
    displayName: "Push extension images to ACR"
    retryCountOnTaskFailure: 3
