parameters:
  - name: osModifierBranch
    type: string
    default: "submodule"

steps:
  - bash: |
      set -ex
      if command -v tdnf; then
        # Use msft-golang since it has latest versions supported
        sudo tdnf remove golang -y
        sudo tdnf install msft-golang -y
      else
        sudo snap install --classic go
      fi

      # Verify installation
      go version
    displayName: "Install golang to build Image Customizer"
    retryCountOnTaskFailure: 3
  - bash: |
      set -ex
      git submodule init
      git submodule update

      if [[ "${{ parameters.osModifierBranch }}" != "submodule" ]]; then
        pushd azure-linux-image-tools
        git fetch --all --verbose
        git branch
        popd
        git submodule set-branch --branch ${{ parameters.osModifierBranch }} azure-linux-image-tools
        git submodule update --remote
        pushd azure-linux-image-tools
        git log -1
        popd
      fi

      # Only check for tdnf case, where msft golang is installed
      if command -v tdnf; then
        # Ideas taken from azure-linux-image-tools/toolkit/scripts/tools.mk, and
        # reapplied here to only set GOEXPERIMENT=nosystemcrypto when msft golang
        # is a version greater than 1.25.0

        go_min_version_needing_change=go1.25.0
        go_current_version=$(go version | awk '{print $3}')

        # Check if the go version is greater than 1.25.0, if it is, set GOEXPERIMENT.
        # The 'sort' command is used to compare the versions (with -V which sorts by 
        # version number). If the highest version in the reverse sort is the same as
        # the current version, then GOEXPERIMENT must be set.
        go_version_check=$(printf '%s\n%s\n' "$go_min_version_needing_change" "$go_current_version" | sort -V -r | head -n1)
        if [[ "$go_version_check" == "$go_current_version" ]]; then
          # For msft golang, set GOEXPERIMENT to nosystemcrypto to
          # enable previous default crypto behavior
          export GOEXPERIMENT=nosystemcrypto
        fi
      fi

      mkdir -p artifacts
      mkdir -p azure-linux-image-tools/SPECS
      make -C azure-linux-image-tools/toolkit go-osmodifier REBUILD_TOOLS=y
      rm -rf azure-linux-image-tools/SPECS
      mv azure-linux-image-tools/toolkit/out/tools/osmodifier artifacts/
    displayName: "Build OSModifier"
    workingDirectory: $(Build.SourcesDirectory)
    retryCountOnTaskFailure: 3
