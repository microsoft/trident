parameters:
  - name: "imageName"
    displayName: "Test image name, doubling as repository name"
    type: string

  - name: "versionNumber"
    displayName: "Test image version number"
    type: string

  - name: "registry"
    displayName: "Container registry to push to"
    type: string
    default: "maritimuspublic"

  - name: "config"
    displayName: "Trident configuration"
    type: string

steps:
  - bash: |
      set -eux

      if [ ${{ parameters.config }} != 'misc' ]; then
        echo "Skipping step. Configuration is '${{ parameters.config }}'."
        exit 0
      fi

      VERSION="1.2.2"
      curl -LO "https://github.com/oras-project/oras/releases/download/v${VERSION}/oras_${VERSION}_linux_amd64.tar.gz"
      mkdir -p oras-install/
      tar -zxf oras_${VERSION}_*.tar.gz -C oras-install/
      sudo mv oras-install/oras /usr/local/bin/
      rm -rf oras_${VERSION}_*.tar.gz oras-install/
    displayName: "Install ORAS"
    retryCountOnTaskFailure: 3

  - task: AzureCLI@2
    inputs:
      azureSubscription: maritimus-staging-eastus-cr-service-connection
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        set -eux

        if [ ${{ parameters.config }} != 'misc' ]; then
          echo "Skipping step. Configuration is '${{ parameters.config }}'."
          exit 0
        fi

        # Login to ACR
        az acr login -n ${{ parameters.registry }}
    displayName: "Az ACR login"
    retryCountOnTaskFailure: 3

  - bash: |
      set -eux

      if [ ${{ parameters.config }} != 'misc' ]; then
        echo "Skipping step. Configuration is '${{ parameters.config }}'."
        exit 0
      fi

      repository_name=${{ parameters.imageName }}
      build_id="$(Build.BuildId)"

      # cd "$(System.ArtifactsDirectory)/testimage"
      cd $(Build.SourcesDirectory)/artifacts/test-image

      if [[ ${{ parameters.versionNumber }} == 1 ]]; then
        filename="${{ parameters.imageName }}.cosi"
      else
        filename="${{ parameters.imageName }}_v${{ parameters.versionNumber }}.cosi"
      fi

      tag="v$build_id"
      echo "Pushing $filename with tag $tag to ${{ parameters.registry }}.azurecr.io"
      oras push ${{ parameters.registry }}.azurecr.io/$repository_name:$tag "$filename"

      # for cosi_file in *.cosi; do
      #   if [ -f "$cosi_file" ]; then
      #     filename=$(basename "$cosi_file")
      #     version_num=$(echo "$filename" | grep -o '_v[0-9]\+' | tr -d '_')
      #     version_tag="v$build_id.$version_num"

      #     echo "Pushing $filename with tag $version_tag to ${{ parameters.registry }}.azurecr.io"
      #     oras push ${{ parameters.registry }}.azurecr.io/$repository_name:$version_tag "$cosi_file"

      #     # Push duplicate of clean install image with v3 tag for A/B Update into runtime OS A
      #     if [ "$version_num" -eq 1 ]; then
      #       version_tag="v$build_id.3"
      #       echo "Pushing $filename with tag $version_tag to ${{ parameters.registry }}.azurecr.io"
      #       oras push ${{ parameters.registry }}.azurecr.io/$repository_name:$version_tag "$cosi_file"
      #     fi
      #   fi
      # done
    displayName: "Push ${{ parameters.imageName }} to registry"
    retryCountOnTaskFailure: 3
