parameters:
  - name: "feed"
    type: string
    default: TridentDev
    values: [TridentDev]
  - name: "packageName"
    type: string
    default: rpms-pr
    values: [rpms-pr]

steps:
  - script: echo $(Build.BuildNumber)
    displayName: "Print Trident Version"

  - script: |
      set -eux

      alreadyPublished=$(./scripts/get-packages.py --debug \
          --feed '${{ parameters.feed }}' \
          --package '${{ parameters.packageName }}' \
          --version '$(Build.BuildNumber)' \
          --action=exists)

      # Save variable to know if package needs to be published
      set +x
      echo "##vso[task.setvariable variable=isVersionInFeed;]$alreadyPublished"
    displayName: "Check if package version has already been published in the feed."
    workingDirectory: $(Build.SourcesDirectory)
    env:
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

  - script: |
      mkdir -p $(Build.SourcesDirectory)/staging_dir
      cp $(ob_outputDirectory)/*.rpm $(Build.SourcesDirectory)/staging_dir
      ls $(Build.SourcesDirectory)/staging_dir
    displayName: Copy RPMs into Staging Directory

  - task: UniversalPackages@0
    displayName: "Publish RPMs Universal Package"
    condition: and(succeeded(), eq(variables.isVersionInFeed, false))
    inputs:
      command: publish
      vstsFeedPublish: "ECF/${{ parameters.feed }}"
      vstsFeedPackagePublish: "${{ parameters.packageName }}"
      publishDirectory: "$(Build.SourcesDirectory)/staging_dir"
      versionPublish: $(Build.BuildNumber)
      versionOption: custom
