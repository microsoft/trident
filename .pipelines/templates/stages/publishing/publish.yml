parameters:
  - name: "feed"
    displayName: "Target feed to publish to"
    type: string
    default: ECF/Trident

  - name: "stageType"
    displayName: "Controls whether this is a pre-release or a CI run."
    type: string
    default: ci
    values:
      - ci
      - pre
      - rel

stages:
  - stage: Publishing
    dependsOn:
      - GetTridentBinaries_rpms
      - ${{ if eq(parameters.stageType, 'ci') }}:
        - TridentTestImg_azl_installer
      - ${{ else }}:
        - GetTridentBinaries_usb_iso
      - ${{ if eq(parameters.stageType, 'pre') }}:
          - DeploymentTesting_host
          - DeploymentTesting_container
          - FunctionalTesting
          - BaremetalDeploymentTesting_host
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main') )

    jobs:
      - job: Publishing
        displayName: Publish Trident RPMs and Provisioning OS Template ISO to Universal Packages
        pool:
          type: linux

        variables:
          - template: ../../feed-staging-vars.yml
          - name: ob_outputDirectory
            value: $(Build.SourcesDirectory)/build
          - name: "artifactSuffix"
            ${{ if eq(parameters.stageType, 'ci') }}:
              value: "${{ variables.stage_ci_suffix }}"
            ${{ if eq(parameters.stageType, 'pre') }}:
              value: "${{ variables.stage_pre_suffix }}"
            ${{ if eq(parameters.stageType, 'rel') }}:
              value: "${{ variables.stage_rel_suffix }}"

        steps:
          - script: echo $(Build.BuildNumber)
            displayName: "Print Trident Version"

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              patterns: |
                *.rpm
              targetPath: $(Pipeline.Workspace)/rpms
              artifactName: trident-binaries
            displayName: "Download Trident RPMs"

          - script: |
              set -eux

              alreadyPublished=$(./scripts/get-packages.py --debug \
                  --package '${{ variables.rpmsPackageBaseName }}${{ variables.artifactSuffix }}' \
                  --version '$(Build.BuildNumber)' \
                  --action=exists)

              # Save variable to know if package needs to be published
              set +x
              echo "##vso[task.setvariable variable=isVersionInFeed;]$alreadyPublished"
            displayName: "Check if package version has already been published in the feed."
            workingDirectory: $(Build.SourcesDirectory)
            env:
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

          - task: DownloadPipelineArtifact@2
            inputs:
              buildType: current
              targetPath: $(Pipeline.Workspace)/azl-installer
              artifactName: azl-installer
            displayName: "Download USB-ISO"

          - script: |
              set -eux

              alreadyPublished=$(./scripts/get-packages.py --debug \
                  --package '${{ variables.usbIsoPackageBaseName }}${{ variables.artifactSuffix }}' \
                  --version '$(Build.BuildNumber)' \
                  --action=exists)

              # Save variable to know if package needs to be published
              set +x
              echo "##vso[task.setvariable variable=isUsbIsoVersionInFeed;]$alreadyPublished"
            displayName: "Check if ${{ variables.usbIsoPackageBaseName }} version has already been published in the feed."
            workingDirectory: $(Build.SourcesDirectory)
            env:
              AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)

          - task: UniversalPackages@0
            displayName: "Publish rpms Universal Package"
            condition: and(succeeded(), eq(variables.isVersionInFeed, false))
            inputs:
              command: publish
              vstsFeedPublish: ${{ parameters.feed }}
              vstsFeedPackagePublish: "${{ variables.rpmsPackageBaseName }}${{ variables.artifactSuffix }}"
              publishDirectory: "$(Pipeline.Workspace)/rpms"
              versionPublish: $(Build.BuildNumber)
              versionOption: custom

          - task: UniversalPackages@0
            displayName: "Publish ${{ variables.usbIsoPackageBaseName }} Universal Package"
            condition: and(succeeded(), eq(variables.isUsbIsoVersionInFeed, false))
            inputs:
              command: publish
              vstsFeedPublish: ${{ parameters.feed }}
              vstsFeedPackagePublish: "${{ variables.usbIsoPackageBaseName }}${{ variables.artifactSuffix }}"
              publishDirectory: "$(Pipeline.Workspace)/azl-installer"
              # We are forced to use semver, we use MARINER_MAJOR.YYYYMMDD.BUILD_COUNTER
              versionPublish: "$(Build.BuildNumber)"
              versionOption: custom
              packagePublishDescription: "Azure Linux Installer ISO (Trident)"
