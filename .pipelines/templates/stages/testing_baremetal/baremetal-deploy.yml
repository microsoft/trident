parameters:
  - name: jobName
    type: string
    default: "trident_baremetal_deploy"

  - name: bmcUsername
    type: string

  - name: bmcPassword
    type: string

  - name: httpProxy
    type: string
    default: "http://172.16.1.10:3128"

  - name: noProxy
    type: string
    default: "10.96.0.0/12,10.244.0.0/16,172.27.254.0/24,.svc,127.0.0.1,localhost"

  - name: isoHttpdServerIp
    type: string
    default: "10.248.0.4"

  - name: bmcIp
    type: string
    default: "10.8.3.20" # TODO: Once original BMC 10.8.3.18 is fixed, this will be switched back. ADO Task: https://dev.azure.com/mariner-org/ECF/_sprints/taskboard/Crew%20-%20Trident/ECF/2407?workitem=8027

  - name: oamIp
    type: string
    default: "10.8.4.50"

  - name: oamMacAddress
    type: string
    default: "c8:4b:d6:7a:73:c6"

  - name: k8sSanityDir
    type: string

  - name: hostConfigYaml
    type: string

  - name: sshKeyFile
    type: string

  - name: installerIsoDirectory
    type: string

  - name: netlistenPort
    type: number

steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: current
      artifactName: "go-tools"
      branchName: "refs/heads/main"
      targetPath: "$(System.ArtifactsDirectory)/go-tools"

  - bash: |
      set -xe

      ls -ltr
      ls -ltr scripts
      ls -ltr ${{ parameters.installerIsoDirectory }}

      ./scripts/patch.py ${{ parameters.installerIsoDirectory }}/trident-installer-testimage.iso installer-patched.iso ${{ parameters.hostConfigYaml }}
      patched_iso=$(pwd)/installer-patched.iso
      echo "##vso[task.setvariable variable=PATCHED_INSTALLER_ISO]$patched_iso"
      ls -ltr
    displayName: "Create patched Installer.iso"

  - bash: |
      set -xe

      # Add poetry to PATH.
      export PATH="$HOME/.local/bin:$PATH"

      baremetal_dir=$(Pipeline.Workspace)/s/platform-tests/bare-metal

      # Create the Lab metadata file
      cd ${{ parameters.k8sSanityDir }}
      bmc_config_file=${{ parameters.k8sSanityDir }}/bmc_config
      sudo env "PATH=$PATH" poetry run python3 $baremetal_dir/scripts/create_baremetal_config.py \
            --baremetal-config-template $baremetal_dir/lab-metadata/aods-lab/aods-template.yaml \
            --bmc-ip ${{ parameters.bmcIp }} \
            --bmc-username ${{ parameters.bmcUsername }} \
            --bmc-password ${{ parameters.bmcPassword }} \
            --oam-mac-address ${{ parameters.oamMacAddress }} \
            --oam-ip ${{ parameters.oamIp }} \
            --ssh-key ${{ parameters.sshKeyFile }} \
            -o $bmc_config_file

      echo "##vso[task.setvariable variable=DEPLOYMENT_BMC_CONFIG_FILE]$bmc_config_file"
    displayName: "Create BMC Config file specific to pass to deploy.py script"

  - bash: |
      set -xe

      # Add poetry to PATH.
      export PATH="$HOME/.local/bin:$PATH"

      # Start netlisten on port.
      pwd
      ls -ltr .
      mkdir -p ./bin
      sudo cp $(System.ArtifactsDirectory)/go-tools/netlisten ./bin/
      sudo chown -R $(USER):$(USER) ./bin/netlisten
      sudo chmod 755 ./bin/netlisten
      ls -ltr ./bin
      ./bin/netlisten -p ${{ parameters.netlistenPort }}  > ./bm-deployment.log 2>&1 &

      cd ${{ parameters.k8sSanityDir }}

      chmod 400 $(httpdPrivKey.secureFilePath)
      DEPLOYMENT_BMC_CONFIG_FILE=$(echo $DEPLOYMENT_BMC_CONFIG_FILE | tr -d "'")
      PATCHED_INSTALLER_ISO=$(echo $PATCHED_INSTALLER_ISO | tr -d "'")
      echo $DEPLOYMENT_BMC_CONFIG_FILE
      echo $PATCHED_INSTALLER_ISO
      sleep 5

      # Boot the baremetal lab machine
      sudo env "PATH=$PATH" poetry run $(Build.SourcesDirectory)/.pipelines/templates/stages/testing_baremetal/deploy_on_bm.py \
        --trident-yaml ${{ parameters.hostConfigYaml }} \
        --installer-iso $PATCHED_INSTALLER_ISO \
        --baremetal-config $DEPLOYMENT_BMC_CONFIG_FILE \
        --proxy ${{ parameters.httpProxy }} \
        --trident-httpd-ip ${{ parameters.isoHttpdServerIp }} \
        --trident-httpd-ssh-key $(httpdPrivKey.secureFilePath)
    displayName: "Boot baremetal lab machine"

  - bash: |
      set -eux
      ls -ltr .
      if [[ -f ./bm-deployment.log ]]; then
        cat ./bm-deployment.log
        mkdir -p $(ob_outputDirectory)
        sudo cp ./bm-deployment.log $(ob_outputDirectory)/bm-deployment.log
      fi
    condition: succeededOrFailed()
    displayName: "Display and publish logs collected from the netlisten process"
