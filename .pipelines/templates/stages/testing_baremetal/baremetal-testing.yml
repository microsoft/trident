parameters:
  - name: jobName
    type: string
    default: trident_baremetal_tests

  - name: testingRun
    displayName: "Download prebuilt test artifacts"
    type: boolean
    default: false

  - name: buildPurpose
    type: string
    default: "daily"
    values:
      - daily
      - validation
      - weekly

  - name: runtimeEnv
    displayName: "Runtime environment (host vs container)"
    type: string
    default: "host"
    values:
      - host
      - container

  - name: extraDependsOn
    type: string
    default: ""

stages:
  - stage: BaremetalDeploymentTesting_${{ parameters.runtimeEnv }}
    displayName: Baremetal Deployment Testing ${{ parameters.runtimeEnv }}
    dependsOn:
      - ${{ if ne(parameters.extraDependsOn, '') }}:
          - ${{ parameters.extraDependsOn }}
      - ${{ if eq(parameters.testingRun, true) }}:
          - DownloadTestingElements
      - ${{ else }}:
          - BuildingTools
          - ${{ if eq(parameters.runtimeEnv, 'container') }}:
              - BuildTridentContainerImage
              - TridentTestImg_trident_container_installer
              - TridentTestImg_trident_container_testimage
              - TridentTestImg_trident_container_verity_testimage
              - TridentTestImg_trident_container_usrverity_testimage
          - ${{ else }}:
              - TridentTestImg_trident_verity_testimage
              - TridentTestImg_trident_installer
              - TridentTestImg_trident_testimage
              - TridentTestImg_trident_usrverity_testimage

    jobs:
      - template: ../testing_common/get-tests.yml
        parameters:
          buildPurpose: ${{ parameters.buildPurpose }}
          deploymentEnvironment: bareMetal
          runtimeEnv: ${{ parameters.runtimeEnv }}

      - job: ${{ parameters.jobName }}
        displayName: Run E2E Test
        dependsOn: DefineTests
        timeoutInMinutes: 90
        pool:
          type: linux
          name: trident-aods-conn-1es-pool
          hostArchitecture: amd64

        strategy:
          matrix: $[ dependencies.DefineTests.outputs['setConfigurations.matrixConfigurations'] ]
          maxParallel: 1

        variables:
          # Definition of what server to use for the test and related settings!
          - name: BAREMETAL_BMC_IP
            value: "10.8.3.20"
          - name: BAREMETAL_OAM_INTERFACE
            value: "eno8303"
          - name: BAREMETAL_OAM_IP
            value: "10.8.4.50"
          - name: BAREMETAL_OAM_GATEWAY
            value: "10.8.4.1"
          - name: BAREMETAL_OAM_MAC
            value: "c8:4b:d6:7a:73:c6"
          - name: BAREMETAL_LAB_CANARY_IP
            value: "10.8.6.1"

          # Alternate HTTP(S) proxy which can be used with AEP02 is "http://192.168.229.51:3128"
          - name: BAREMETAL_HTTPS_PROXY
            value: "http://172.16.1.10:3128"

          # Sourced from the matrix
          - name: TRIDENT_CONFIGURATION_NAME
            value: $(configuration)

          - name: TRIDENT_SOURCE_DIR
            value: $(Build.SourcesDirectory)

          - name: TRIDENT_CONFIG_PATH
            value: $(TRIDENT_SOURCE_DIR)/e2e_tests/trident_configurations/$(TRIDENT_CONFIGURATION_NAME)

          - name: TRIDENT_CONFIG_FILE
            value: $(TRIDENT_CONFIG_PATH)/trident-config.yaml

          - name: ob_outputDirectory
            value: $(Build.SourcesDirectory)/deployment_logs

          - name: ob_artifactBaseName
            value: $(TRIDENT_CONFIGURATION_NAME)_baremetal_${{ parameters.runtimeEnv }}_deployment_log_$(System.JobAttempt)

          - name: NETLAUNCH_PORT
            value: 4000

          - name: INSTALLER_ISO_NAME
            ${{ if eq(parameters.runtimeEnv, 'container') }}:
              value: "trident-container-installer"
            ${{ else }}:
              value: "trident-installer"

          - name: IMAGE_NAME
            ${{ if eq(parameters.runtimeEnv, 'container') }}:
              value: "trident-container-testimage"
            ${{ else }}:
              value: "trident-testimage"

          - name: VERITY_IMAGE_NAME
            ${{ if eq(parameters.runtimeEnv, 'container') }}:
              value: "trident-container-verity-testimage"
            ${{ else }}:
              value: "trident-verity-testimage"

          - name: USRVERITY_IMAGE_NAME
            ${{ if eq(parameters.runtimeEnv, 'container') }}:
              value: "trident-container-usrverity-testimage"
            ${{ else }}:
              value: "trident-usrverity-testimage"

          - group: baremetal_controller

        steps:
          - bash: |
              set -xe
              ping -c 3 "${{ variables.BAREMETAL_LAB_CANARY_IP }}"
            displayName: "Validate if the Baremetal lab is up and running"

          - bash: |
              set -xe

              # Install packages.
              sudo apt update
              sudo apt install -y \
                libgirepository1.0-dev \
                python3-venv \
                python3-dev \
                openssh-client \
                ncat \
                libcairo2-dev \
                acl \
                protobuf-compiler
              sudo snap install yq
              setfacl --help

              # Install poetry
              set -o pipefail
              curl -sSL https://install.python-poetry.org | python3 -
            displayName: "Install dependencies"
            retryCountOnTaskFailure: 3

          # Download all test images
          - template: ../testing_common/download-test-images.yml
            parameters:
              installerISO: ${{ variables.INSTALLER_ISO_NAME }}
              tridentTestImage: ${{ variables.IMAGE_NAME }}
              tridentTestImageVerity: ${{ variables.VERITY_IMAGE_NAME }}
              tridentTestImageUsrVerity: ${{ variables.USRVERITY_IMAGE_NAME }}
              ${{ if eq(parameters.runtimeEnv, 'container') }}:
                downloadTridentContainer: true

          # Push (regular or container) testimage to ACR.
          # This step must occur before trident prep, since the ACR image tag
          # variable is set in this template.
          - template: ../common_tasks/push-to-acr.yml
            parameters:
              imageName: ${{ variables.IMAGE_NAME }}
              registry: maritimusdev
              config: $(TRIDENT_CONFIGURATION_NAME)
              deploymentEnvironment: "bareMetal"

          # Run trident prep
          - template: ../testing_common/trident-prep.yml
            parameters:
              tridentConfigPath: $(TRIDENT_CONFIG_PATH)
              runtimeEnv: ${{ parameters.runtimeEnv }}
              config: $(TRIDENT_CONFIGURATION_NAME)
              registry: maritimusdev
              imageName: ${{ variables.IMAGE_NAME }}

          - bash: |
              set -xe

              # Add poetry to PATH.
              export PATH="$HOME/.local/bin:$PATH"

              ls -l

              # Run script to update the trident.yaml file
              python3 ./.pipelines/templates/stages/testing_baremetal/update_host_config.py \
                    --trident-yaml $(TRIDENT_CONFIG_FILE) \
                    --oam-ip ${{ variables.BAREMETAL_OAM_IP }} \
                    --oam-gateway ${{ variables.BAREMETAL_OAM_GATEWAY }} \
                    --interface-name ${{ variables.BAREMETAL_OAM_INTERFACE }} \
                    --oam-mac ${{ variables.BAREMETAL_OAM_MAC }}
              cat $(TRIDENT_CONFIG_FILE)
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)
            displayName: "Update Trident Config to inject static IP for OAM interface"

          - bash: |
              set -eux

              SERVICE_OVERRIDE=""
              if [ "${{ parameters.runtimeEnv }}" == "host" ]; then 
                SERVICE_OVERRIDE="[Service]
                  Environment=\"HTTPS_PROXY=${{ variables.BAREMETAL_HTTPS_PROXY }}\""
              else
                # When running containerized Trident, we must directly embed the proxy in the docker command
                SERVICE_OVERRIDE="[Service]
                  Environment=\"HTTPS_PROXY=${{ variables.BAREMETAL_HTTPS_PROXY }}\"
                  ExecStart=
                  ExecStart=docker run \\
                    --env HTTPS_PROXY \\
                    --name trident_container \\
                    --pull=never \\
                    --rm \\
                    --privileged \\
                    -v /etc/trident:/etc/trident \\
                    -v /etc/pki:/etc/pki:ro \\
                    -v /run/initramfs/live:/trident_cdrom \\
                    -v /var/lib/trident:/var/lib/trident \\
                    -v /var/log:/var/log \\
                    -v /:/host \\
                    -v /dev:/dev \\
                    -v /run:/run \\
                    -v /sys:/sys \\
                    --pid host \\
                    --ipc host trident/trident:latest install \\
                    --verbosity TRACE"
              fi

              cat << EOF > $(TRIDENT_SOURCE_DIR)/baremetal-netlaunch.yaml
              netlaunch:
                bmc:
                  ip: "${{ variables.BAREMETAL_BMC_IP }}"
                  username: "$(baremetal_controller.bmc_username)"
                  password: "$(baremetal_controller.bmc_password)"
                  serialOverSsh:
                    sshPort: 22
                    comPort: com2
                    output:  "baremetal-serial.log"

              # Set up proxy variables
              iso:
                serviceOverride: |
                  $SERVICE_OVERRIDE
              EOF

              cat $(TRIDENT_SOURCE_DIR)/baremetal-netlaunch.yaml | grep -v password

              cat << EOF > $(TRIDENT_SOURCE_DIR)/baremetal-netlisten.yaml
              netlisten:
                bmc:
                  ip: "${{ variables.BAREMETAL_BMC_IP }}"
                  username: "$(baremetal_controller.bmc_username)"
                  password: "$(baremetal_controller.bmc_password)"
                  serialOverSsh:
                    sshPort: 22
                    comPort: com2
                    output:  "baremetal-serial.log"
              EOF

              cat $(TRIDENT_SOURCE_DIR)/baremetal-netlisten.yaml | grep -v password

            displayName: "Write Netlaunch and netlisten configuration"

          - bash: |
              set -euxo pipefail
              MAX_FAILURES_FLAG=""

              # rerun is expected to fail ONCE
              if [ ${{ variables['TRIDENT_CONFIGURATION_NAME'] }} == 'rerun' ]; then 
                MAX_FAILURES_FLAG="--max-failures 1"
              fi

              # memory-constraint-combined is meant to produce ONE failure
              # because the first run modifies the service file and exits
              # prematurely, so that the second run will have the memory
              # constraints applied.
              if [ ${{ variables['TRIDENT_CONFIGURATION_NAME'] }} == 'memory-constraint-combined' ]; then 
                MAX_FAILURES_FLAG="--max-failures 1"
              fi

              ./bin/netlaunch \
                  --iso $(TRIDENT_SOURCE_DIR)/artifacts/iso/${{ variables.INSTALLER_ISO_NAME }}.iso \
                  --config $(TRIDENT_SOURCE_DIR)/baremetal-netlaunch.yaml \
                  --trident $(TRIDENT_CONFIG_FILE) \
                  --servefolder ./artifacts/test-image \
                  --logstream $MAX_FAILURES_FLAG \
                  --trace-file $(TRIDENT_SOURCE_DIR)/trident-clean-install-metrics.jsonl \
                  --force-color \
                  --full-logstream logstream-full.log \
                  --wait-for-provisioned-state \
                  --port ${{ variables.NETLAUNCH_PORT }} 2>&1 | tee ./clean-install-deployment.log
            timeoutInMinutes: 30
            workingDirectory: ${{ variables.TRIDENT_SOURCE_DIR }}
            displayName: "Run netlaunch for testing"

          - template: ../testing_common/display-deployment-logs.yml
            parameters:
              deploymentLogPath: ${{ variables.TRIDENT_SOURCE_DIR }}/logstream-full.log
              displayName: "Display clean install logs"

          - bash: |
              CLEAN_INSTALL_LOG="${{ variables.TRIDENT_SOURCE_DIR }}/clean-install-deployment.log"
              SERIAL_LOG="${{ variables.TRIDENT_SOURCE_DIR }}/baremetal-serial.log"

              # Copy the logs to the output directory
              if [ -f $CLEAN_INSTALL_LOG ]; then
                cp $CLEAN_INSTALL_LOG $(ob_outputDirectory)/
              fi

              # Output the serial log
              if [ -f $SERIAL_LOG ]; then
                cp $SERIAL_LOG $(ob_outputDirectory)/
                echo "Serial log found:"
                cat $SERIAL_LOG
              else
                echo "Serial log not found!"
                echo "(No serial log captured)" > $SERIAL_LOG
              fi
            displayName: "Output serial log"
            condition: always()

          - bash: |
              set -eux
              ./bin/storm-trident helper check-selinux \
                  "$(Build.SourcesDirectory)/e2e_tests/helpers/key" \
                  "${{ variables.BAREMETAL_OAM_IP }}" \
                  "testing-user" \
                  "${{ parameters.runtimeEnv }}" \
                  --audit-file $(ob_outputDirectory)/audit.log \
            timeoutInMinutes: 5
            condition: eq('${{ parameters.runtimeEnv }}', 'host')
            displayName: "📄 Check for SELinux failures"

          - bash: |
              set -eux
              ./bin/storm-trident helper boot-metrics \
                  "$(Build.SourcesDirectory)/e2e_tests/helpers/key" \
                  "${{ variables.BAREMETAL_OAM_IP }}" \
                  "testing-user" \
                  "${{ parameters.runtimeEnv }}" \
                  --metrics-file $(TRIDENT_SOURCE_DIR)/trident-clean-install-metrics.jsonl \
                  --metrics-operation install
            displayName: "Create boot metrics for booting into runtime OS"

          - template: ../testing_common/trident-metrics.yml
            parameters:
              tridentSourceDirectory: $(TRIDENT_SOURCE_DIR)
              tridentConfigPath: $(TRIDENT_CONFIG_PATH)
              deploymentEnvironment: bareMetal
              runtimeEnvironment: ${{ parameters.runtimeEnv }}
              tridentConfigurationName: $(TRIDENT_CONFIGURATION_NAME)
              metricsFile: $(TRIDENT_SOURCE_DIR)/trident-clean-install-metrics.jsonl
              ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
                kustoTableName: main
              ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
                kustoTableName: dev

          - template: ../testing_common/e2e-test-run.yml
            parameters:
              buildPurpose: ${{ parameters.buildPurpose }}
              deploymentEnvironment: bareMetal
              tridentConfigurationName: $(TRIDENT_CONFIGURATION_NAME)
              hostIp: ${{ variables.BAREMETAL_OAM_IP }}
              tridentConfigPath: $(TRIDENT_CONFIG_PATH)
              netlistenPort: ${{ variables.NETLAUNCH_PORT }}
              runtimeEnv: ${{ parameters.runtimeEnv }}
              netlistenConfigFile: $(TRIDENT_SOURCE_DIR)/baremetal-netlisten.yaml
              httpsProxy: ${{ variables.BAREMETAL_HTTPS_PROXY }}

          - template: ../common_tasks/remove-from-acr.yml
            parameters:
              repository: ${{ variables.IMAGE_NAME }}
              registry: "maritimusdev"
              config: $(TRIDENT_CONFIGURATION_NAME)
