parameters:
  - name: tridentSourceDirectory
    type: string
    default: "."

  - name: tridentConfigPath
    type: string

  - name: deploymentEnvironment
    type: string

  - name: runtimeEnvironment
    type: string

  - name: tridentConfigurationName
    type: string

  - name: metricsFile
    type: string

  - name: kustoDatabaseName
    type: string
    default: "trident"

  - name: kustoTableName
    type: string

  - name: kustoTableMapping
    type: string
    default: "metrics"

steps:
  - bash: |
      set -eu
      if [ -s "${{ parameters.metricsFile }}" ]; then
        echo "##vso[task.setvariable variable=ProcessMetricsFile]true"
        echo "Metrics file exists and is not empty."
      else
        if [[ "$AGENT_JOBSTATUS" == "Succeeded" ]]; then
          echo "Metrics file does not exist or is empty, but there were no previous failures!"
          echo "##vso[task.setvariable variable=ProcessMetricsFile]false"
          echo "##vso[task.complete result=Failed;]"
        else
          echo "Metrics file does not exist or is empty, but a previous failure occurred."
          echo "##vso[task.setvariable variable=ProcessMetricsFile]false"
        fi
      fi
    displayName: "Check if metrics file exists and is not empty"
    condition: succeededOrFailed()

  - bash: |
      set -eux
      python3 ${{ parameters.tridentSourceDirectory }}/e2e_tests/helpers/process_trident_metrics.py --trident-config ${{ parameters.tridentConfigPath }}/trident-config.yaml --metrics-file ${{ parameters.metricsFile }}
    workingDirectory: ${{ parameters.tridentSourceDirectory }}
    displayName: "Process Trident metrics"
    condition: eq(variables['ProcessMetricsFile'], 'true')
    env:
      TRIDENT_CONFIGURATION_NAME: ${{ parameters.tridentConfigurationName }}
      SOURCE_BRANCH_NAME: $(Build.SourceBranchName)
      MACHINE_TYPE: ${{ parameters.deploymentEnvironment }}
      RUNTIME_ENVIRONMENT: ${{ parameters.runtimeEnvironment }}
      PIPELINE_NAME: $(Build.DefinitionName)

  - template: pipelines/templates/upload-metrics-step.yaml@platform-telemetry
    parameters:
      kustoDatabaseName: ${{ parameters.kustoDatabaseName }}
      kustoTableName: ${{ parameters.kustoTableName }}
      kustoTableMapping: ${{ parameters.kustoTableMapping }}
      metricsFile: ${{ parameters.metricsFile }}
      runOnFailure: true
