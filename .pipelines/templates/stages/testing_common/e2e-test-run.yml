parameters:
  - name: buildPurpose
    type: string
    default: "post_merge"
    values:
      - daily
      - pullrequest
      - post_merge
      - validation
      - weekly

  - name: tridentConfigurationName
    type: string
    default: ""

  - name: deploymentEnvironment
    type: string
    default: virtualMachine

  - name: runtimeEnv
    displayName: "Runtime environment (host vs container)"
    type: string
    default: "host"
    values:
      - host
      - container

  - name: hostIp
    type: string
    default: ""

  - name: tridentConfigPath
    type: string

  - name: jUnitXMLIdentifier
    type: string
    default: trident_e2e_tests

  - name: sshKeyPath
    type: string
    default: $(Build.SourcesDirectory)/e2e_tests/helpers/key

  - name: userName
    type: string
    default: "testing-user"

  - name: artifactsDirectory
    type: string
    default: artifacts/test-image

  - name: netlistenPort
    type: number
    default: 4000
  
  - name: netlistenConfigFile
    type: string
    default: ""

steps:
  - bash: |
      set -eux
      sudo pip3 install pytest
      sudo pip3 install fabric
    displayName: "Installing dependencies for E2E tests"

  # Check if Trident config requires A/B update testing.
  - bash: |
      set -eu
      abUpdateExists=$(sudo yq e '.storage.abUpdate != null' "${{ parameters.tridentConfigPath }}/trident-config.yaml")
      if [ "$abUpdateExists" == "true" ]; then
        echo "Trident config requires A/B update testing"
        echo "##vso[task.setvariable variable=abActiveVolume]volume-a"
        echo "##vso[task.setvariable variable=version]2"
        echo "##vso[task.setvariable variable=tridentConfigFile]/var/lib/trident/config.yaml"
      else
        echo "Trident config does not require A/B update testing"
        echo "##vso[task.setvariable variable=abActiveVolume]null"
      fi
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "Check if Trident config requires A/B update testing"

  - bash: |
      $(Build.SourcesDirectory)/bin/storm-trident helper check-ssh \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}"
    displayName: "🤝 Check SSH connection"

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_clean_install_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env ${{ parameters.runtimeEnv }} \
          --configuration ${{ parameters.tridentConfigPath }}
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "🔬 Run Trident E2E tests after clean install of runtime OS"

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_clean_install_$(System.JobAttempt).junit.xml
      testRunTitle: ${{ parameters.deploymentEnvironment }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_clean_install_$(System.JobAttempt)
    displayName: "Publish test results for clean install of runtime OS"

  - task: PublishBuildArtifacts@1
    condition: and(succeededOrFailed(), ne(variables['abActiveVolume'], 'null'))
    inputs:
      pathToPublish: './e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_clean_install_$(System.JobAttempt).junit.xml'
      artifactName: 'junit_test_results_ab_update_B'
    displayName: 'Publish JUnit XML for A/B update B as artifact'

  # If current config requires A/B update testing, execute A/B update
  - bash: |
      set -eux

      NETLISTEN_CONFIG_ARGS=""
      if [ -n "${{ parameters.netlistenConfigFile }}" ]; then
        NETLISTEN_CONFIG_ARGS="--config ${{ parameters.netlistenConfigFile }}"
      fi
      ./bin/netlisten --force-color $NETLISTEN_CONFIG_ARGS \
        -m $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-B.jsonl \
        --full-logstream ./logstream-full.log \
        -s "${{ parameters.artifactsDirectory }}" \
        -p ${{ parameters.netlistenPort }} > ./stage-finalize-ab-update-runtime-os-B.log 2>&1 &

      echo "Running script to stage and finalize A/B update..."
      ./bin/storm-trident helper ab-update \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --trident-config $(tridentConfigFile) \
          --version $(version) \
          --stage-ab-update \
          --finalize-ab-update

      current_version=$(echo $(version))
      new_version=$((current_version + 1))
      set +x
      echo "##vso[task.setvariable variable=version]$new_version"
      echo "##vso[task.setvariable variable=abActiveVolume]volume-b"
    timeoutInMinutes: 15
    workingDirectory: $(Build.SourcesDirectory)
    displayName: "🔄 Stage and finalize A/B update into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/display-serial-logs.yml
    parameters:
      netlistenConfigFile: ${{ parameters.netlistenConfigFile }}
      outputDirectory: $(ob_outputDirectory)
      partition: B

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/stage-finalize-ab-update-runtime-os-B.log
      displayName: "📄 Display deployment logs for OS B"

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/logstream-full.log
      displayName: "📄 [TRACE] Full logstream for OS B"

  - bash: |
      set -eux
      ./bin/storm-trident helper boot-metrics \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --metrics-file $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-B.jsonl \
          --metrics-operation update1
    displayName: "Create boot metrics for OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/trident-metrics.yml
    parameters:
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      runtimeEnvironment: ${{ parameters.runtimeEnv }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
      metricsFile: $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-B.jsonl
      tridentOperation: ab-update
      ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: main
      ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: dev

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_B_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env ${{ parameters.runtimeEnv }} \
          --configuration ${{ parameters.tridentConfigPath }} \
          --ab-active-volume $(abActiveVolume)
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "🔬 Trident E2E tests after A/B update into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - task: PublishTestResults@2
    condition: and(succeededOrFailed(), ne(variables['abActiveVolume'], 'null'))
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_B_$(System.JobAttempt).junit.xml
      testRunTitle: ${{ parameters.deploymentEnvironment }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_ab_update_B_$(System.JobAttempt)

  - bash: |
     mkdir -p $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
     cp ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_B_$(System.JobAttempt).junit.xml $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/
    displayName: "Prepare JUnit XML for artifact publishing"
    condition: succeededOrFailed()

  - task: PublishBuildArtifacts@1
    displayName: "Publish JUnit XML as artifact"
    condition: succeededOrFailed()
    inputs:
      pathToPublish: "$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT"
      artifactName: "junit_test_results_ab_update_B"

  - bash: |
      set -eux
      mkdir -p $(Build.ArtifactStagingDirectory)/build-number-trident-stage-finalize
      echo "$(Build.BuildNumber)" > $(Build.ArtifactStagingDirectory)/build-number-trident-stage-finalize/build-number.config
    displayName: "Generate build-number.config for stage-finalize"

  - task: PublishBuildArtifacts@1
    displayName: "Publish build-number-trident-stage-finalize artifact"
    inputs:
      pathToPublish: "$(Build.ArtifactStagingDirectory)/build-number-trident-stage-finalize"
      ArtifactName: build-number-trident-stage-finalize

  # 1) Download the previously published JUnit XML files
  - task: DownloadBuildArtifacts@1
    displayName: "Download JUnit test results"
    inputs:
      buildType: current
      downloadType: single
      artifactName: "junit_test_results_ab_update_B"
      downloadPath: "$(Build.ArtifactStagingDirectory)/junits"

  # 2) Filter out only the A/B update B test reports
  - bash: |
      mkdir -p $(Build.ArtifactStagingDirectory)/filtered-junits
      cp $(Build.ArtifactStagingDirectory)/junits/junit_test_results_ab_update_B/*ab_update_B*.xml \
        $(Build.ArtifactStagingDirectory)/filtered-junits/ || true
      echo "Filtered JUnit files:"
      ls -la $(Build.ArtifactStagingDirectory)/filtered-junits/
    displayName: "Filter JUnit files for dashboard push"

  - template: ../common/dbCommunication/push-test-results-to-db.yaml
    parameters:
      marinerTridentPipelinesSourceDirectory: '$(Build.SourcesDirectory)'
      junitFilesDirectory: '$(Build.ArtifactStagingDirectory)/filtered-junits'
      isStaging: true
      buildConfigArtifactName: 'build-number-trident-stage-finalize'
      architecture: 'x86_64'
      test_suite_name: "trident-stage-finalize"
      test_type_prefix: "${{ parameters.buildPurpose }}"