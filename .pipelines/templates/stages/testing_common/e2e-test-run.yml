parameters:
  - name: buildPurpose
    type: string
    default: "post_merge"
    values:
      - daily
      - pullrequest
      - post_merge
      - validation
      - weekly

  - name: tridentConfigurationName
    type: string
    default: ""

  - name: deploymentEnvironment
    type: string
    default: virtualMachine

  - name: runtimeEnv
    displayName: "Runtime environment (host vs container)"
    type: string
    default: "host"
    values:
      - host
      - container

  - name: hostIp
    type: string
    default: ""

  - name: tridentConfigPath
    type: string

  - name: jUnitXMLIdentifier
    type: string
    default: trident_e2e_tests

  - name: sshKeyPath
    type: string
    default: $(Build.SourcesDirectory)/e2e_tests/helpers/key

  - name: userName
    type: string
    default: "testing-user"

  - name: artifactsDirectory
    type: string
    default: artifacts/test-image

  - name: netlistenPort
    type: number
    default: 4000
  
  - name: netlaunchConfigFile
    type: string

steps:
  - bash: |
      set -eux
      sudo pip3 install pytest
      sudo pip3 install fabric
    displayName: "Installing dependencies for E2E tests"

  # Check if Trident config requires A/B update testing.
  - bash: |
      set -eu
      abUpdateExists=$(sudo yq e '.storage.abUpdate != null' "${{ parameters.tridentConfigPath }}/trident-config.yaml")
      if [ "$abUpdateExists" == "true" ]; then
        echo "Trident config requires A/B update testing"
        echo "##vso[task.setvariable variable=abActiveVolume]volume-a"
        echo "##vso[task.setvariable variable=version]2"
        echo "##vso[task.setvariable variable=tridentConfigFile]/var/lib/trident/config.yaml"
      else
        echo "Trident config does not require A/B update testing"
        echo "##vso[task.setvariable variable=abActiveVolume]null"
      fi
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "Check if Trident config requires A/B update testing"

  - bash: |
      $(Build.SourcesDirectory)/bin/storm-trident helper check-ssh \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}"
    displayName: "🤝 Check SSH connection"

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_clean_install_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env ${{ parameters.runtimeEnv }} \
          --configuration ${{ parameters.tridentConfigPath }}
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "🔬 Run Trident E2E tests after clean install of runtime OS"

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_clean_install_$(System.JobAttempt).junit.xml
      testRunTitle: ${{ parameters.deploymentEnvironment }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_clean_install_$(System.JobAttempt)
    displayName: "Publish test results for clean install of runtime OS"

  # If current config requires A/B update testing, execute script to ssh into the host, update
  # images in the custom Trident config, and re-run Trident to both stage and finalize A/B update.
  - bash: |
      set -eux
      ./bin/netlisten --force-color \
        -m $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-B.jsonl \
        --full-logstream ./logstream-full.log \
        -s "${{ parameters.artifactsDirectory }}" \
        -p ${{ parameters.netlistenPort }} > ./stage-finalize-ab-update-runtime-os-B.log 2>&1 &
      
      ./bin/seriallisten --config ${{ parameters.netlaunchConfigFile}} &

      echo "Running script to stage and finalize A/B update..."
      ./bin/storm-trident helper ab-update \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --trident-config $(tridentConfigFile) \
          --version $(version) \
          --stage-ab-update \
          --finalize-ab-update

      current_version=$(echo $(version))
      new_version=$((current_version + 1))
      # Un-set the 'x' flag to avoid errors.
      set +x
      echo "##vso[task.setvariable variable=version]$new_version"
      echo "##vso[task.setvariable variable=abActiveVolume]volume-b"
    timeoutInMinutes: 15
    workingDirectory: $(Build.SourcesDirectory)
    displayName: "🔄 Stage and finalize A/B update into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - bash: |
      set -eux
      if cat ${{ parameters.netlaunchConfigFile }} | grep -q "bmc:"; then
        echo "Netlaunch config file contains 'bmc' keyword, retrieve serial output from seriallisten"
        export SERIAL_LOG="${{ variables.TRIDENT_SOURCE_DIR }}/baremetal-serial.log"

        # Output the serial log
        if [ ! -f $SERIAL_LOG ]; then
          echo "Serial log not found!"
          echo "(No serial log captured)" > $SERIAL_LOG
        fi
      else
        echo "Netlaunch config file does not contain 'bmc' keyword, retrieve serial output from local VM"
        export SERIAL_LOG="$(find /tmp/*-serial0.log | head -n 1)"
      fi

      cp $SERIAL_LOG $(ob_outputDirectory)/serial-update-runtime-os-B.log
      echo "Serial log found:"
      cat $SERIAL_LOG
    displayName: "Display serial output from update to B"
    condition: and(always(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/stage-finalize-ab-update-runtime-os-B.log
      displayName: "📄 Display A/B update deployment logs for runtime OS B"

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/logstream-full.log
      displayName: "📄 [TRACE] Display A/B update deployment logs for runtime OS B"

  - bash: |
      set -eux
      ./bin/storm-trident helper boot-metrics \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --metrics-file $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-B.jsonl \
          --metrics-operation update1
    displayName: "Create boot metrics for booting into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/trident-metrics.yml
    parameters:
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      runtimeEnvironment: ${{ parameters.runtimeEnv }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
      metricsFile: $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-B.jsonl
      tridentOperation: ab-update
      ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: main
      ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: dev

  # Re-run E2E tests after A/B update into runtime OS B.
  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_B_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env ${{ parameters.runtimeEnv }} \
          --configuration ${{ parameters.tridentConfigPath }} \
          --ab-active-volume $(abActiveVolume)
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "🔬 Run Trident E2E tests after A/B update into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - task: PublishTestResults@2
    condition: and(succeededOrFailed(), ne(variables['abActiveVolume'], 'null'))
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_B_$(System.JobAttempt).junit.xml
      testRunTitle: ${{ parameters.deploymentEnvironment }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_ab_update_B_$(System.JobAttempt)
    displayName: "Publish test results for A/B update into runtime OS B"

  - bash: |
      set -eux
      # If there is a netlisten process, kill it so there is no port clash in the instance
      if pgrep netlisten > /dev/null; then pkill netlisten; fi

      ./bin/netlisten --force-color \
          -m $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-A.jsonl \
          --full-logstream ./logstream-full.log \
          -s "${{ parameters.artifactsDirectory }}" \
          -p ${{ parameters.netlistenPort }} > ./stage-finalize-ab-update-runtime-os-A.log 2>&1 &

      ./bin/seriallisten --config ${{ parameters.netlaunchConfigFile}} &

      echo "Running script to stage and finalize A/B update..."
      ./bin/storm-trident helper ab-update \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --trident-config $(tridentConfigFile) \
          --version $(version) \
          --stage-ab-update \
          --finalize-ab-update

      current_version=$(echo $(version))
      new_version=$((current_version + 1))
      # Un-set the 'x' flag to avoid errors.
      set +x
      echo "##vso[task.setvariable variable=version]$new_version"
      echo "##vso[task.setvariable variable=abActiveVolume]volume-a"
    timeoutInMinutes: 15
    workingDirectory: $(Build.SourcesDirectory)
    displayName: "🔄 Stage and finalize A/B update into runtime OS A"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - bash: |
      set -eux
      if cat ${{ parameters.netlaunchConfigFile }} | grep -q "bmc:"; then
        echo "Netlaunch config file contains 'bmc' keyword, retrieve serial output from seriallisten"
        export SERIAL_LOG="${{ variables.TRIDENT_SOURCE_DIR }}/baremetal-serial.log"

        # Output the serial log
        if [ ! -f $SERIAL_LOG ]; then
          echo "Serial log not found!"
          echo "(No serial log captured)" > $SERIAL_LOG
        fi
      else
        echo "Netlaunch config file does not contain 'bmc' keyword, retrieve serial output from local VM"
        export SERIAL_LOG="$(find /tmp/*-serial0.log | head -n 1)"
      fi

      cp $SERIAL_LOG $(ob_outputDirectory)/serial-update-runtime-os-A.log
      echo "Serial log found:"
      cat $SERIAL_LOG
    displayName: "Display serial output from update to A"
    condition: and(always(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/stage-finalize-ab-update-runtime-os-A.log
      displayName: "📄 Display A/B update deployment logs for runtime OS A"

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/logstream-full.log
      displayName: "📄 [TRACE] Display A/B update deployment logs for runtime OS A"

  - bash: |
      set -eux
      ./bin/storm-trident helper boot-metrics \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --metrics-file $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-A.jsonl \
          --metrics-operation update2
    displayName: "Create boot metrics for booting into runtime OS A"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/trident-metrics.yml
    parameters:
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      runtimeEnvironment: ${{ parameters.runtimeEnv }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
      metricsFile: $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-A.jsonl
      tridentOperation: ab-update
      ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: main
      ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: dev

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_A_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env ${{ parameters.runtimeEnv }} \
          --configuration ${{ parameters.tridentConfigPath }} \
          --ab-active-volume $(abActiveVolume)
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "🔬 Run Trident E2E tests after A/B update into runtime OS A"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - task: PublishTestResults@2
    condition: and(succeededOrFailed(), ne(variables['abActiveVolume'], 'null'))
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_A_$(System.JobAttempt).junit.xml
      testRunTitle: ${{ parameters.deploymentEnvironment }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_ab_update_A_$(System.JobAttempt)
    displayName: "Publish test results for A/B update into runtime OS A"

  # Check the value of 'buildPurpose', to determine if we need to execute the
  # test scenario where A/B update is staged and finalized independently. This
  # test is to be run only when 'buildPurpose' is 'daily', for lower frequency.
  - ${{ if eq(parameters.buildPurpose, 'daily') }}:
      - template: e2e-ab-update-stage-finalize-test-run.yml
        parameters:
          buildPurpose: ${{ parameters.buildPurpose }}
          tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
          hostIp: ${{ parameters.hostIp }}
          runtimeEnv: ${{ parameters.runtimeEnv }}
          tridentConfigPath: ${{ parameters.tridentConfigPath }}
          sshKeyPath: ${{ parameters.sshKeyPath }}
          userName: ${{ parameters.userName }}
          artifactsDirectory: ${{ parameters.artifactsDirectory }}
          deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
          netlistenPort: ${{ parameters.netlistenPort }}

  - template: ../testing_common/trident-rebuild.yml
    parameters:
      hostIp: ${{ parameters.hostIp }}
      sshKeyPath: ${{ parameters.sshKeyPath }}
      userName: ${{ parameters.userName }}
      runtimeEnv: ${{ parameters.runtimeEnv }}
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
