parameters:
  - name: buildPurpose
    type: string
    default: "post_merge"
    values:
      - daily
      - pullrequest
      - post_merge
      - validation

  - name: tridentConfigurationName
    type: string
    default: ""

  - name: deploymentEnvironment
    type: string
    default: virtualMachine

  - name: runtimeEnv
    displayName: "Runtime environment (host vs container)"
    type: string
    default: "host"
    values:
      - host
      - container

  - name: hostIp
    type: string
    default: ""

  - name: tridentConfigPath
    type: string

  - name: jUnitXMLIdentifier
    type: string
    default: trident_e2e_tests

  - name: sshKeyPath
    type: string
    default: $(Build.SourcesDirectory)/e2e_tests/helpers/key

  - name: userName
    type: string
    default: "testing-user"

  - name: artifactsDirectory
    type: string
    default: artifacts/test-image

  - name: netlistenPort
    type: number
    default: 4000

steps:
  - bash: |
      set -eux
      sudo pip3 install pytest
      sudo pip3 install fabric
    displayName: "Installing dependencies for E2E tests"

  # Check if Trident config requires A/B update testing. Skip A/B update testing
  # if config is 'rerun' or 'memory-constraint-combined'. This is because those
  # two scenarios trigger another systemd service run of Trident, which is not
  # possible in the current A/B update testing script.
  - bash: |
      set -eu
      abUpdateExists=$(sudo yq e '.storage.abUpdate != null' "${{ parameters.tridentConfigPath }}/trident-config.yaml")
      if [ "$abUpdateExists" == "true" ] && \
       [ "${{ parameters.tridentConfigurationName }}" != "rerun" ] && \
       [ "${{ parameters.tridentConfigurationName }}" != "memory-constraint-combined" ]; then
        echo "Trident config requires A/B update testing"
        echo "##vso[task.setvariable variable=abActiveVolume]volume-a"
        echo "##vso[task.setvariable variable=version]2"
        echo "##vso[task.setvariable variable=tridentConfigFile]/var/lib/trident/config.yaml"
      else
        echo "Trident config does not require A/B update testing"
        echo "##vso[task.setvariable variable=abActiveVolume]null"
      fi
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "Check if Trident config requires A/B update testing"

  # Check if Trident config requires verity runtime OS images. If yes, need to copy verity runtime
  # OS images to a writable directory /run on the VM. If not, copy runtime OS images to /abupdate.
  # For both cases, create a new variable localTempDirectory to copy runtime OS images to, and then
  # scp it in its entirety onto the host.
  - bash: |
      set -eu
      verityRequired=$(sudo yq e '.storage.verityFilesystems != null' "${{ parameters.tridentConfigPath }}/trident-config.yaml")
      if [ "$verityRequired" == "true" ]; then
        echo "Trident config requires verity runtime OS images"
        echo "##vso[task.setvariable variable=verityRequired]true"
        echo "##vso[task.setvariable variable=destinationDirectory]/run"
      else
        echo "Trident config does not require verity runtime OS images"
        echo "##vso[task.setvariable variable=verityRequired]false"
        echo "##vso[task.setvariable variable=destinationDirectory]/abupdate"
      fi

      echo "##vso[task.setvariable variable=localTempDirectory]$(Build.SourcesDirectory)/e2e_tests/helpers/runtime_os_images"
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "Check if Trident config requires verity runtime OS images"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  # TODO: Remove after trident-container-verity-testimage is being used for E2E tests (Task #9652).
  - bash: |
      set -eu
      verityRequired=$(sudo yq e '.storage.verityFilesystems != null' "${{ parameters.tridentConfigPath }}/trident-config.yaml")
      if [ "$verityRequired" == "true" ]; then
        echo "Trident is running from the Runtime OS on the host (verity not enabled for container)."
        echo "##vso[task.setvariable variable=runtimeEnv]host"
      else
        echo "Runtime environment is the same for Provisioning OS and Runtime OS."
        echo "##vso[task.setvariable variable=runtimeEnv]${{ parameters.runtimeEnv }}"
      fi
    displayName: "Define Trident runtime environment"

  - bash: |
      set -eux
      chmod +x $(Build.SourcesDirectory)/.pipelines/templates/stages/testing_common/scripts/check-ssh-connection.sh
      $(Build.SourcesDirectory)/.pipelines/templates/stages/testing_common/scripts/check-ssh-connection.sh \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.hostIp }}"
    displayName: "Check SSH connection"

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_clean_install_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env $(runtimeEnv) \
          --configuration ${{ parameters.tridentConfigPath }}
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "Run Trident E2E tests after clean install of runtime OS"

  - task: PublishTestResults@2
    condition: succeededOrFailed()
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_clean_install_$(System.JobAttempt).junit.xml
      testRunTitle: ${{ parameters.deploymentEnvironment }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_clean_install_$(System.JobAttempt)
    displayName: "Publish test results for clean install of runtime OS"

  # If current Trident config requires A/B update testing, copy runtime OS images onto the host.
  - bash: |
      set -eux
      chmod +x $(Build.SourcesDirectory)/.pipelines/templates/stages/testing_common/scripts/copy-runtime-os-images.sh
      $(Build.SourcesDirectory)/.pipelines/templates/stages/testing_common/scripts/copy-runtime-os-images.sh \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.artifactsDirectory }}" \
          $(localTempDirectory) \
          $(destinationDirectory) \
          $(version) \
          $(verityRequired)
    displayName: "Copy runtime OS images to the host for A/B update testing"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  # If current config requires A/B update testing, execute script to ssh into the host, update
  # images in the custom Trident config, and re-run Trident to both stage and finalize A/B update.
  - bash: |
      set -eux
      ./bin/netlisten -m $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-B.jsonl -p ${{ parameters.netlistenPort }} > ./stage-finalize-ab-update-runtime-os-B.log 2>&1 &
      echo "Running script to stage and finalize A/B update..."
      python3 $(Build.SourcesDirectory)/e2e_tests/helpers/ab_update.py \
          --ip-address ${{ parameters.hostIp }} \
          --user-name ${{ parameters.userName }} \
          --keys-file-path ${{ parameters.sshKeyPath }} \
          --destination-directory $(destinationDirectory) \
          --trident-config $(tridentConfigFile) \
          --version $(version) \
          --runtime-env $(runtimeEnv) \
          --stage-ab-update \
          --finalize-ab-update

      current_version=$(echo $(version))
      new_version=$((current_version + 1))
      # Un-set the 'x' flag to avoid errors.
      set +x
      echo "##vso[task.setvariable variable=version]$new_version"
      echo "##vso[task.setvariable variable=abActiveVolume]volume-b"
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)
    displayName: "Stage and finalize A/B update into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/stage-finalize-ab-update-runtime-os-B.log

  - bash: |
      set -eux
      $(Build.SourcesDirectory)/.pipelines/templates/stages/testing_common/scripts/check-ssh-connection.sh \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.hostIp }}"
    displayName: "Check SSH connection after booting into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/trident-metrics.yml
    parameters:
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      runtimeEnvironment: ${{ parameters.runtimeEnv }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
      metricsFile: $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-B.jsonl
      tridentOperation: ab-update
      ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: main
      ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: dev

  # Re-run E2E tests after A/B update into runtime OS B.
  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_B_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env $(runtimeEnv) \
          --configuration ${{ parameters.tridentConfigPath }} \
          --ab-active-volume $(abActiveVolume)
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "Run Trident E2E tests after A/B update into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - task: PublishTestResults@2
    condition: and(succeededOrFailed(), ne(variables['abActiveVolume'], 'null'))
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_B_$(System.JobAttempt).junit.xml
      testRunTitle: ${{ parameters.deploymentEnvironment }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_ab_update_B_$(System.JobAttempt)
    displayName: "Publish test results for A/B update into runtime OS B"

  - bash: |
      set -eux
      ls -ltr $(System.ArtifactsDirectory)
      $(Build.SourcesDirectory)/.pipelines/templates/stages/testing_common/scripts/copy-runtime-os-images.sh \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.artifactsDirectory }}" \
          $(localTempDirectory) \
          $(destinationDirectory) \
          $(version) \
          $(verityRequired)
    displayName: "Copy runtime OS images to the host for A/B update testing"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - bash: |
      set -eux
      # If there is a netlisten process, kill it so there is no port clash in the instance
      if pgrep netlisten > /dev/null; then pkill netlisten; fi
      ./bin/netlisten -m $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-A.jsonl -p ${{ parameters.netlistenPort }} > ./stage-finalize-ab-update-runtime-os-A.log 2>&1 &
      echo "Running script to stage and finalize A/B update..."
      python3 $(Build.SourcesDirectory)/e2e_tests/helpers/ab_update.py \
          --ip-address ${{ parameters.hostIp }} \
          --user-name ${{ parameters.userName }} \
          --keys-file-path ${{ parameters.sshKeyPath }} \
          --destination-directory $(destinationDirectory) \
          --trident-config $(tridentConfigFile) \
          --version $(version) \
          --runtime-env $(runtimeEnv) \
          --stage-ab-update \
          --finalize-ab-update

      current_version=$(echo $(version))
      new_version=$((current_version + 1))
      # Un-set the 'x' flag to avoid errors.
      set +x
      echo "##vso[task.setvariable variable=version]$new_version"
      echo "##vso[task.setvariable variable=abActiveVolume]volume-a"
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)
    displayName: "Stage and finalize A/B update into runtime OS A"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/stage-finalize-ab-update-runtime-os-A.log

  - bash: |
      set -eux
      $(Build.SourcesDirectory)/.pipelines/templates/stages/testing_common/scripts/check-ssh-connection.sh \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.hostIp }}"
    displayName: "Check SSH connection after booting into runtime OS A"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/trident-metrics.yml
    parameters:
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      runtimeEnvironment: ${{ parameters.runtimeEnv }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
      metricsFile: $(Build.SourcesDirectory)/trident-ab-update-metrics-runtime-os-A.jsonl
      tridentOperation: ab-update
      ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: main
      ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: dev

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_A_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env $(runtimeEnv) \
          --configuration ${{ parameters.tridentConfigPath }} \
          --ab-active-volume $(abActiveVolume)
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "Run Trident E2E tests after A/B update into runtime OS A"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - task: PublishTestResults@2
    condition: and(succeededOrFailed(), ne(variables['abActiveVolume'], 'null'))
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_A_$(System.JobAttempt).junit.xml
      testRunTitle: ${{ parameters.deploymentEnvironment }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_ab_update_A_$(System.JobAttempt)
    displayName: "Publish test results for A/B update into runtime OS A"

  # Check the value of 'buildPurpose', to determine if we need to execute the
  # test scenario where A/B update is staged and finalized independently. This
  # test is to be run only when 'buildPurpose' is 'daily', for lower frequency.
  - ${{ if eq(parameters.buildPurpose, 'daily') }}:
      - template: e2e-ab-update-stage-finalize-test-run.yml
        parameters:
          buildPurpose: ${{ parameters.buildPurpose }}
          tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
          hostIp: ${{ parameters.hostIp }}
          runtimeEnv: ${{ parameters.runtimeEnv }}
          tridentConfigPath: ${{ parameters.tridentConfigPath }}
          sshKeyPath: ${{ parameters.sshKeyPath }}
          userName: ${{ parameters.userName }}
          artifactsDirectory: ${{ parameters.artifactsDirectory }}
          deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
          netlistenPort: ${{ parameters.netlistenPort }}

  - template: ../testing_common/trident-rebuild.yml
    parameters:
      hostIp: ${{ parameters.hostIp }}
      sshKeyPath: ${{ parameters.sshKeyPath }}
      userName: ${{ parameters.userName }}
      runtimeEnv: ${{ parameters.runtimeEnv }}
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
