parameters:
  - name: buildPurpose
    type: string
    default: "post_merge"
    values:
      - daily
      - pullrequest
      - post_merge
      - validation
      - weekly

  - name: tridentConfigurationName
    type: string
    default: ""

  - name: deploymentEnvironment
    type: string
    default: virtualMachine
    values:
      - virtualMachine
      - bareMetal

  - name: runtimeEnv
    displayName: "Runtime environment (host vs container)"
    type: string
    default: "host"
    values:
      - host
      - container

  - name: hostIp
    type: string
    default: ""

  - name: tridentConfigPath
    type: string

  - name: jUnitXMLIdentifier
    type: string
    default: trident_e2e_tests

  - name: sshKeyPath
    type: string
    default: $(Build.SourcesDirectory)/tests/e2e_tests/helpers/key

  - name: userName
    type: string
    default: "testing-user"

  - name: artifactsDirectory
    type: string
    default: artifacts/test-image

  - name: netlistenPort
    type: number
    default: 4000

  - name: netlistenConfigFile
    type: string
    default: ""

  - name: httpsProxy
    type: string
    default: ""

steps:
  - bash: |
      set -eux
      sudo pip3 install pytest
      sudo pip3 install fabric
    displayName: "Installing dependencies for E2E tests"

  # Check if Trident config requires A/B update testing.
  # If it does, initialize the variables for active volume and image version.
  - bash: |
      set -eu
      abUpdateExists=$(sudo yq e '.storage.abUpdate != null' "${{ parameters.tridentConfigPath }}/trident-config.yaml")
      if [ "$abUpdateExists" == "true" ]; then
        echo "Trident config requires A/B update testing"
        echo "##vso[task.setvariable variable=abActiveVolume]volume-a"
        echo "##vso[task.setvariable variable=version]2"
        echo "##vso[task.setvariable variable=tridentConfigFile]/var/lib/trident/config.yaml"
      else
        echo "Trident config does not require A/B update testing"
        echo "##vso[task.setvariable variable=abActiveVolume]null"
        echo "##vso[task.setvariable variable=skipJunitHandling]true"
      fi
    workingDirectory: $(Build.SourcesDirectory)/tests/e2e_tests
    displayName: "Check if Trident config requires A/B update testing"

  - bash: |
      $(Build.SourcesDirectory)/bin/storm-trident helper check-ssh \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}"
    displayName: "ü§ù Check SSH connection"

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.deploymentEnvironment }}_${{ parameters.runtimeEnv }}_${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_clean_install_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env ${{ parameters.runtimeEnv }} \
          --configuration ${{ parameters.tridentConfigPath }}
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/tests/e2e_tests
    displayName: "üî¨ Run Trident E2E tests after clean install of target OS"

  - template: ../junit/handle-junit-test-results.yml
    parameters:
      testRunName: "${{ parameters.deploymentEnvironment }}_${{ parameters.runtimeEnv }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_clean_install_$(System.JobAttempt)"
      junitTestFile: "./tests/e2e_tests/${{ parameters.deploymentEnvironment }}_${{ parameters.runtimeEnv }}_${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_clean_install_$(System.JobAttempt).junit.xml"
      displayNameSpecifier: "clean install of target OS"
      artifactName: "junit_for_trident_clean_install"

  # If current config requires A/B update testing, execute script to ssh into the host, update
  # images in the custom Trident config, and re-run Trident to both stage and finalize A/B update.
  - bash: |
      set -eux

      NETLISTEN_CONFIG_ARGS=""
      if [ -n "${{ parameters.netlistenConfigFile }}" ]; then
        NETLISTEN_CONFIG_ARGS="--config ${{ parameters.netlistenConfigFile }}"
      fi

      ./bin/netlisten --force-color $NETLISTEN_CONFIG_ARGS \
        -m $(Build.SourcesDirectory)/trident-ab-update-metrics-target-os-B.jsonl \
        --full-logstream ./logstream-full.log \
        -s "${{ parameters.artifactsDirectory }}" \
        -p ${{ parameters.netlistenPort }} > ./stage-finalize-ab-update-target-os-B.log 2>&1 &

      PROXY_ARG=""
      if [ -n "${{ parameters.httpsProxy }}" ]; then
        PROXY_ARG="--proxy HTTPS_PROXY=${{ parameters.httpsProxy }}"
      fi

      echo "Running script to stage and finalize A/B update..."
      ./bin/storm-trident helper ab-update \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --trident-config $(tridentConfigFile) \
          --version $(version) \
          --stage-ab-update \
          --finalize-ab-update \
          $PROXY_ARG

      current_version=$(echo $(version))
      new_version=$((current_version + 1))
      # Un-set the 'x' flag to avoid errors.
      set +x
      echo "##vso[task.setvariable variable=version]$new_version"
      echo "##vso[task.setvariable variable=abActiveVolume]volume-b"

    timeoutInMinutes: 15
    workingDirectory: $(Build.SourcesDirectory)
    displayName: "üÖ±Ô∏èüîÑ Stage and finalize A/B update into target OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/display-serial-logs.yml
    parameters:
      netlistenConfigFile: ${{ parameters.netlistenConfigFile }}
      outputDirectory: $(ob_outputDirectory)
      partition: B

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/stage-finalize-ab-update-target-os-B.log
      displayName: "üìÑ Display A/B update deployment logs for target OS B"

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/logstream-full.log
      displayName: "üìÑ [TRACE] Display A/B update deployment logs for target OS B"

  - bash: |
      set -eux
      ./bin/storm-trident helper boot-metrics \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --metrics-file $(Build.SourcesDirectory)/trident-ab-update-metrics-target-os-B.jsonl \
          --metrics-operation update1
    displayName: "Create boot metrics for booting into target OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/trident-metrics.yml
    parameters:
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      runtimeEnvironment: ${{ parameters.runtimeEnv }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
      metricsFile: $(Build.SourcesDirectory)/trident-ab-update-metrics-target-os-B.jsonl
      tridentOperation: ab-update
      ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: main
      ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: dev

  # Re-run E2E tests after A/B update into target OS B.
  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.deploymentEnvironment }}_${{ parameters.runtimeEnv }}_${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_B_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env ${{ parameters.runtimeEnv }} \
          --configuration ${{ parameters.tridentConfigPath }} \
          --ab-active-volume $(abActiveVolume)
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/tests/e2e_tests
    displayName: "üî¨ Run Trident E2E tests after A/B update into target OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../junit/handle-junit-test-results.yml
    parameters:
      testRunName: "${{ parameters.deploymentEnvironment }}_${{ parameters.runtimeEnv }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_ab_update_B_$(System.JobAttempt)"
      junitTestFile: "./tests/e2e_tests/${{ parameters.deploymentEnvironment }}_${{ parameters.runtimeEnv }}_${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_B_$(System.JobAttempt).junit.xml"
      displayNameSpecifier: "A/B update into target OS B"
      artifactName: "junit_for_trident_ab_update_B"

  # Test UEFI-fallback scenario after A/B update into target OS B.
  # This scenario will configure an update into target OS A that 
  # will configure UEFI-fallback (rollback) to OS B. When OS A is
  # booted, a service will clear the UEFI variables and reboot.
  # Upon reboot, the system should boot into OS B.
  #
  # This scenario is configured to run for all VM e2e tests that
  # do A/B update, and for BM e2e tests that do A/B update in the
  # weekly build purpose.
  - template: ./e2e-test-abupdate-scenario.yml
    parameters:
      # Rollback-specific parameters
      updateScenarioName: "uefi-fallback-rollback"
      updateScenarioTargetOs: "A"
      updateScenarioFlag: "--uefi-fallback rollback"
      expectActiveVolume: volume-b
      incrementUpdateVersion: false
      updateScenarioTestName: "uefifallback"
      expectCommitFailure: true
      updateEmoji: "üí´"
      skipConfigurations: "root-verity"
      # Pass all other parameters throuh
      buildPurpose: ${{ parameters.buildPurpose }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
      tridentConfigFile: $(tridentConfigFile)
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      runtimeEnv: ${{ parameters.runtimeEnv }}
      hostIp: ${{ parameters.hostIp }}
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      jUnitXMLIdentifier: ${{ parameters.jUnitXMLIdentifier }}
      sshKeyPath: ${{ parameters.sshKeyPath }}
      userName: ${{ parameters.userName }}
      artifactsDirectory: ${{ parameters.artifactsDirectory }}
      netlistenPort: ${{ parameters.netlistenPort }}
      netlistenConfigFile: ${{ parameters.netlistenConfigFile }}
      httpsProxy: ${{ parameters.httpsProxy }}


  - bash: |
      set -eux
      # If there is a netlisten process, kill it so there is no port clash in the instance
      if pgrep netlisten > /dev/null; then pkill netlisten; fi

      NETLISTEN_CONFIG_ARGS=""
      if [ -n "${{ parameters.netlistenConfigFile }}" ]; then
        NETLISTEN_CONFIG_ARGS="--config ${{ parameters.netlistenConfigFile }}"
      fi

      ./bin/netlisten --force-color $NETLISTEN_CONFIG_ARGS \
          -m $(Build.SourcesDirectory)/trident-ab-update-metrics-target-os-A.jsonl \
          --full-logstream ./logstream-full.log \
          -s "${{ parameters.artifactsDirectory }}" \
          -p ${{ parameters.netlistenPort }} > ./stage-finalize-ab-update-target-os-A.log 2>&1 &

      PROXY_ARG=""
      if [ -n "${{ parameters.httpsProxy }}" ]; then
        PROXY_ARG="--proxy HTTPS_PROXY=${{ parameters.httpsProxy }}"
      fi

      echo "Running script to stage and finalize A/B update..."
      ./bin/storm-trident helper ab-update \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --trident-config $(tridentConfigFile) \
          --version $(version) \
          --stage-ab-update \
          --finalize-ab-update \
          $PROXY_ARG

      current_version=$(echo $(version))
      new_version=$((current_version + 1))
      # Un-set the 'x' flag to avoid errors.
      set +x
      echo "##vso[task.setvariable variable=version]$new_version"
      echo "##vso[task.setvariable variable=abActiveVolume]volume-a"
    timeoutInMinutes: 15
    workingDirectory: $(Build.SourcesDirectory)
    displayName: "üÖ∞Ô∏èüîÑ Stage and finalize A/B update into target OS A"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/display-serial-logs.yml
    parameters:
      netlistenConfigFile: ${{ parameters.netlistenConfigFile }}
      outputDirectory: $(ob_outputDirectory)
      partition: A

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/stage-finalize-ab-update-target-os-A.log
      displayName: "üìÑ Display A/B update deployment logs for target OS A"

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/logstream-full.log
      displayName: "üìÑ [TRACE] Display A/B update deployment logs for target OS A"

  - bash: |
      set -eux
      ./bin/storm-trident helper boot-metrics \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --metrics-file $(Build.SourcesDirectory)/trident-ab-update-metrics-target-os-A.jsonl \
          --metrics-operation update2
    displayName: "Create boot metrics for booting into target OS A"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/trident-metrics.yml
    parameters:
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      runtimeEnvironment: ${{ parameters.runtimeEnv }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
      metricsFile: $(Build.SourcesDirectory)/trident-ab-update-metrics-target-os-A.jsonl
      tridentOperation: ab-update
      ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: main
      ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: dev

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.deploymentEnvironment }}_${{ parameters.runtimeEnv }}_${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_A_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env ${{ parameters.runtimeEnv }} \
          --configuration ${{ parameters.tridentConfigPath }} \
          --ab-active-volume $(abActiveVolume)
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/tests/e2e_tests
    displayName: "üî¨ Run Trident E2E tests after A/B update into target OS A"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../junit/handle-junit-test-results.yml
    parameters:
      testRunName: "${{ parameters.deploymentEnvironment }}_${{ parameters.runtimeEnv }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_ab_update_A_$(System.JobAttempt)"
      junitTestFile: "./tests/e2e_tests/${{ parameters.deploymentEnvironment }}_${{ parameters.runtimeEnv }}_${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_A_$(System.JobAttempt).junit.xml"
      displayNameSpecifier: "A/B update into target OS A"
      artifactName: "junit_for_trident_ab_update_A"

  # Check the value of 'buildPurpose', to determine if we need to execute the
  # test scenario where A/B update is staged and finalized independently. For
  # lower frequency, this test is to be run only when 'buildPurpose' is:
  #  - daily
  #  - validation
  #  - weekly
  - ${{ if or(eq(parameters.buildPurpose, 'daily'), eq(parameters.buildPurpose, 'validation'), eq(parameters.buildPurpose, 'weekly')) }}:
      - template: e2e-ab-update-stage-finalize-test-run.yml
        parameters:
          buildPurpose: ${{ parameters.buildPurpose }}
          tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
          hostIp: ${{ parameters.hostIp }}
          runtimeEnv: ${{ parameters.runtimeEnv }}
          tridentConfigPath: ${{ parameters.tridentConfigPath }}
          sshKeyPath: ${{ parameters.sshKeyPath }}
          userName: ${{ parameters.userName }}
          artifactsDirectory: ${{ parameters.artifactsDirectory }}
          deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
          netlistenPort: ${{ parameters.netlistenPort }}
          netlistenConfigFile: ${{ parameters.netlistenConfigFile }}
          httpsProxy: ${{ parameters.httpsProxy }}

  - template: ../testing_common/trident-rebuild.yml
    parameters:
      hostIp: ${{ parameters.hostIp }}
      sshKeyPath: ${{ parameters.sshKeyPath }}
      userName: ${{ parameters.userName }}
      runtimeEnv: ${{ parameters.runtimeEnv }}
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
