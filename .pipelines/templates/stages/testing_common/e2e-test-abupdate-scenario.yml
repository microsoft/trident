parameters:
  - name: updateScenarioName
    type: string

  - name: updateScenarioTargetOs
    type: string

  - name: updateScenarioFlag
    type: string

  - name: incrementUpdateVersion
    type: boolean

  - name: updateScenarioTestName
    type: string

  - name: expectCommitFailure
    type: boolean

  - name: expectActiveVolume
    type: string

  - name: updateEmoji
    type: string
    default: ""

  - name: buildPurpose
    type: string

  - name: tridentConfigurationName
    type: string

  - name: tridentConfigFile
    type: string

  - name: deploymentEnvironment
    type: string

  - name: runtimeEnv
    type: string

  - name: hostIp
    type: string

  - name: tridentConfigPath
    type: string

  - name: jUnitXMLIdentifier
    type: string

  - name: sshKeyPath
    type: string

  - name: userName
    type: string

  - name: artifactsDirectory
    type: string

  - name: netlistenPort
    type: number

  - name: netlistenConfigFile
    type: string

  - name: httpsProxy
    type: string

steps:
  - bash: |
      if [ "${{ parameters.deploymentEnvironment }}" == "virtualMachine" ]; then
        echo "Test ${{ parameters.updateScenarioName }} for all VM tests that do AB Update"
        echo "##vso[task.setvariable variable=testUpdateScenario]true"
      elif [ "${{ parameters.deploymentEnvironment }}" == "bareMetal" ] && 
         [ "${{ parameters.buildPurpose }}" == "weekly" ]; then
        echo "Test ${{ parameters.updateScenarioName }} for BM tests that do AB Update for Full Validation"
        echo "##vso[task.setvariable variable=testUpdateScenario]true"
      else
        echo "Do not test ${{ parameters.updateScenarioName }}"
        echo "##vso[task.setvariable variable=testUpdateScenario]false"
      fi
    displayName: "Determine whether to test ${{ parameters.updateScenarioName }}"

  - bash: |
      set -eux
      # If there is a netlisten process, kill it so there is no port clash in the instance
      if pgrep netlisten > /dev/null; then pkill netlisten; fi

      NETLISTEN_CONFIG_ARGS=""
      if [ -n "${{ parameters.netlistenConfigFile }}" ]; then
        NETLISTEN_CONFIG_ARGS="--config ${{ parameters.netlistenConfigFile }}"
      fi

      ./bin/netlisten --force-color $NETLISTEN_CONFIG_ARGS \
          -m $(Build.SourcesDirectory)/trident-ab-update-metrics-target-os-${{ parameters.updateScenarioTargetOs }}-${{ parameters.updateScenarioName }}.jsonl \
          --full-logstream ./logstream-full.log \
          -s "${{ parameters.artifactsDirectory }}" \
          -p ${{ parameters.netlistenPort }} > ./stage-finalize-ab-update-target-os-${{ parameters.updateScenarioTargetOs }}-${{ parameters.updateScenarioName }}.log 2>&1 &

      PROXY_ARG=""
      if [ -n "${{ parameters.httpsProxy }}" ]; then
        PROXY_ARG="--proxy HTTPS_PROXY=${{ parameters.httpsProxy }}"
      fi

      EXPECT_FAILURE_ARG=""
      if [ "${{ parameters.expectCommitFailure }}" == "True" ]; then
        EXPECT_FAILURE_ARG="--expect-failed-commit"
      fi

      echo "Running script to stage and finalize A/B update..."
      ./bin/storm-trident helper ab-update \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --trident-config ${{ parameters.tridentConfigFile }} \
          --version $(version) \
          --stage-ab-update \
          --finalize-ab-update \
          ${{ parameters.updateScenarioFlag }} \
          $EXPECT_FAILURE_ARG \
          $PROXY_ARG

      # Un-set the 'x' flag to avoid errors.
      set +x
      echo "##vso[task.setvariable variable=abActiveVolume]${{ parameters.expectActiveVolume }}"

      if [ "${{ parameters.incrementUpdateVersion }}" == "True" ]; then
        current_version=$(echo $(version))
        new_version=$((current_version + 1))
        echo "##vso[task.setvariable variable=version]$new_version"
      fi

    timeoutInMinutes: 15
    workingDirectory: $(Build.SourcesDirectory)
    displayName: "üÖ∞Ô∏èüîÑ${{ parameters.updateEmoji }} Stage and finalize A/B update into target OS ${{ parameters.updateScenarioTargetOs }} testing ${{ parameters.updateScenarioName }}"
    condition: and(succeeded(), eq(variables['testUpdateScenario'], true), ne(variables['abActiveVolume'], 'null'))

  - template: ./capture-screenshot.yml
    parameters:
      screenshotName: "update-a-${{ parameters.updateScenarioName }}"
      captureScreenshot: ${{ and(eq(variables['testUpdateScenario'], true), ne(variables['abActiveVolume'], 'null')) }}
      one: ${{ eq(variables['testUpdateScenario'], true) }}
      two: ${{ ne(variables['abActiveVolume'], 'null') }}
      all: ${{ and(eq(variables['testUpdateScenario'], true), ne(variables['abActiveVolume'], 'null')) }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}

  - template: ./display-serial-logs.yml
    parameters:
      netlistenConfigFile: ${{ parameters.netlistenConfigFile }}
      outputDirectory: $(ob_outputDirectory)
      partition: ${{ parameters.updateScenarioTargetOs }}
      displayNameSuffix: "testing ${{ parameters.updateScenarioName }}"

  - template: ./display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/stage-finalize-ab-update-target-os-${{ parameters.updateScenarioTargetOs }}-${{ parameters.updateScenarioName }}.log
      displayName: "üìÑ Display A/B update deployment logs for target OS ${{ parameters.updateScenarioTargetOs }} testing ${{ parameters.updateScenarioName }}"

  - template: ./display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/logstream-full.log
      displayName: "üìÑ [TRACE] Display A/B update deployment logs for target OS ${{ parameters.updateScenarioTargetOs }} testing ${{ parameters.updateScenarioName }}"

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m ${{ parameters.updateScenarioTestName }} \
          --capture=no \
          --junit-xml=${{ parameters.deploymentEnvironment }}_${{ parameters.runtimeEnv }}_${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_${{ parameters.updateScenarioTargetOs }}_${{ parameters.updateScenarioName }}_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env ${{ parameters.runtimeEnv }} \
          --configuration ${{ parameters.tridentConfigPath }} \
          --ab-active-volume ${{ parameters.expectActiveVolume }}
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/tests/e2e_tests
    displayName: "üî¨${{ parameters.updateEmoji }} Run Trident E2E tests after A/B update into target OS ${{ parameters.updateScenarioTargetOs }} testing ${{ parameters.updateScenarioName }}"
    condition: and(succeeded(), eq(variables['testUpdateScenario'], true), ne(variables['abActiveVolume'], 'null'))
