parameters:
  - name: installerISO
    displayName: "Image used for the installer, source of trident (container vs host)"
    type: string
    default: trident-installer-testimage
    values:
      - trident-installer-testimage
      - trident-container-installer-testimage

  - name: tridentTestImage
    displayName: "Image used the runtime OS, source of trident (container vs host)"
    type: string
    default: trident-testimage
    values:
      - trident-container-testimage
      - trident-testimage

  - name: tridentTestImageVerity
    displayName: "Image used the verity runtime OS, source of trident (container vs host)"
    type: string
    default: trident-verity-testimage
    values:
      - trident-verity-testimage
      - trident-container-verity-testimage

  - name: downloadTridentContainer
    displayName: "Download Trident container"
    type: boolean
    default: false

  - name: targetDirectory
    type: string
    default: "$(Build.SourcesDirectory)/artifacts/test-image"

  - name: isoDirectory
    type: string
    default: "$(Build.SourcesDirectory)/artifacts/iso"

  - name: toolsDirectory
    type: string
    default: "$(Build.SourcesDirectory)/bin"

  - name: testImageDir
    type: string
    default: "$(System.ArtifactsDirectory)/testimage"

  - name: testImageDirVerity
    type: string
    default: "$(System.ArtifactsDirectory)/verity-testimage"

steps:
  - ${{ if parameters.downloadTridentContainer }}:
      - task: DownloadPipelineArtifact@2
        displayName: "Download Trident container"
        inputs:
          buildType: current
          artifactName: "trident-docker-image"
          patterns: "**/trident-container.tar.gz"
          targetPath: "${{ parameters.targetDirectory }}"

  - task: DownloadPipelineArtifact@2
    displayName: "Download ${{ parameters.installerISO }}"
    inputs:
      buildType: current
      artifactName: "${{ parameters.installerISO }}"
      targetPath: "${{ parameters.isoDirectory }}"

  - task: DownloadPipelineArtifact@2
    displayName: "Download ${{ parameters.tridentTestImage }}"
    inputs:
      buildType: current
      artifactName: "${{ parameters.tridentTestImage }}"
      targetPath: "${{ parameters.testImageDir }}"

  - task: DownloadPipelineArtifact@2
    displayName: "Download ${{ parameters.tridentTestImageVerity }}"
    inputs:
      buildType: current
      artifactName: "${{ parameters.tridentTestImageVerity }}"
      targetPath: "${{ parameters.testImageDirVerity }}"

  - task: DownloadPipelineArtifact@2
    displayName: "Download go-tools"
    inputs:
      buildType: current
      artifactName: "go-tools"
      patterns: |
        netlaunch
        netlisten
        mkcosi
        storm-trident
      targetPath: "${{ parameters.toolsDirectory }}"

  - bash: |
      set -eux

      # Set tools to be executable
      chmod +x ${{ parameters.toolsDirectory }}/net*
      chmod +x ${{ parameters.toolsDirectory }}/mkcosi
      chmod +x ${{ parameters.toolsDirectory }}/storm-trident

      # Create the target directory
      mkdir -p "${{ parameters.targetDirectory }}"

      # If testImageDir is not an empty string, rename the Trident test images
      if [ -n "${{ parameters.testImageDir }}" ]; then
        mv "${{ parameters.testImageDir }}/${{ parameters.tridentTestImage }}.cosi" "${{ parameters.targetDirectory }}/regular.cosi"
      fi

      # If testImageDirVerity is not an empty string, rename the Trident verity test images
      if [ -n "${{ parameters.testImageDirVerity }}" ]; then
        mv "${{ parameters.testImageDirVerity }}/${{ parameters.tridentTestImageVerity }}.cosi" "${{ parameters.targetDirectory }}/verity.cosi"
      fi

      # List tools in the target directory
      ls -lh "${{ parameters.toolsDirectory }}"

      # List ISOs in the target directory
      ls -lh "${{ parameters.isoDirectory }}"

      # List images in the target directory
      ls -lh "${{ parameters.targetDirectory }}"
    displayName: "Move and Rename Trident Test Images"
