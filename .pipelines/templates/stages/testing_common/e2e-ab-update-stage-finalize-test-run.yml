parameters:
  - name: buildPurpose
    type: string
    default: "post_merge"
    values:
      - daily
      - pullrequest
      - post_merge
      - validation
      - weekly

  - name: tridentConfigurationName
    type: string
    default: ""

  - name: deploymentEnvironment
    type: string
    default: virtualMachine

  - name: runtimeEnv
    displayName: "Runtime environment (host vs container)"
    type: string
    default: "host"
    values:
      - host
      - container

  - name: hostIp
    type: string
    default: ""

  - name: tridentConfigPath
    type: string

  - name: jUnitXMLIdentifier
    type: string
    default: trident_e2e_tests

  - name: sshKeyPath
    type: string
    default: $(Build.SourcesDirectory)/e2e_tests/helpers/key

  - name: userName
    type: string
    default: "testing-user"

  - name: artifactsDirectory
    type: string
    default: artifacts/test-image

  - name: netlistenPort
    type: number
    default: 4000

  - name: netlistenConfigFile
    type: string
    default: ""

steps:
  - bash: |
      set -eux
      # If there is a netlisten process, kill it so there is no port clash in the instance
      if pgrep netlisten > /dev/null; then pkill netlisten; fi

      ./bin/netlisten -m $(Build.SourcesDirectory)/trident-stage-update-metrics.jsonl \
          -p ${{ parameters.netlistenPort }} \
          -s "${{ parameters.artifactsDirectory }}" > ./stage-ab-update-deployment.log 2>&1 &

      echo "Running script to stage A/B update..."
      ./bin/storm-trident helper ab-update \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --trident-config $(tridentConfigFile) \
          --version $(version) \
          --stage-ab-update
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)
    displayName: "üîÑ Stage A/B update"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/stage-ab-update-deployment.log

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "ab_update_staged" \
          --capture=no \
          --junit-xml=${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_ab_update_A_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env ${{ parameters.runtimeEnv }} \
          --configuration ${{ parameters.tridentConfigPath }} \
          --ab-active-volume $(abActiveVolume)
    timeoutInMinutes: 10
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "üî¨ Run tests to validate staging of A/B update"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/trident-metrics.yml
    parameters:
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      runtimeEnvironment: ${{ parameters.runtimeEnv }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
      metricsFile: $(Build.SourcesDirectory)/trident-stage-update-metrics.jsonl
      tridentOperation: ab-update
      ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: main
      ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: dev

  - bash: |
      set -eux

      NETLISTEN_CONFIG_ARGS=""
      if [ -n "${{ parameters.netlistenConfigFile }}" ]; then
        NETLISTEN_CONFIG_ARGS="--config ${{ parameters.netlistenConfigFile }}"
      fi

      # If there is a netlisten process, kill it so there is no port clash in the instance
      if pgrep netlisten > /dev/null; then pkill netlisten; fi
      ./bin/netlisten $NETLISTEN_CONFIG_ARGS \
          -m $(Build.SourcesDirectory)/trident-finalize-update-metrics.jsonl \
          -p ${{ parameters.netlistenPort }} \
          -s "${{ parameters.artifactsDirectory }}" > ./finalize-ab-update.log 2>&1 &

      echo "Running script to finalize A/B update..."
      ./bin/storm-trident helper ab-update \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --trident-config $(tridentConfigFile) \
          --version $(version) \
          --finalize-ab-update

      current_version=$(echo $(version))
      new_version=$((current_version + 1))
      # Un-set the 'x' flag to avoid errors.
      set +x
      echo "##vso[task.setvariable variable=version]$new_version"
      echo "##vso[task.setvariable variable=abActiveVolume]volume-b"
    timeoutInMinutes: 15
    workingDirectory: $(Build.SourcesDirectory)
    displayName: "üîÑ Finalize A/B update into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/display-serial-logs.yml
    parameters:
      netlistenConfigFile: ${{ parameters.netlistenConfigFile }}
      outputDirectory: $(ob_outputDirectory)
      partition: B
      artifactPrefix: "finalize-ab-update"

  - template: ../testing_common/display-deployment-logs.yml
    parameters:
      deploymentLogPath: $(Build.SourcesDirectory)/finalize-ab-update.log

  - bash: |
      set -eux
      $(Build.SourcesDirectory)/bin/storm-trident helper check-ssh \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}"
    displayName: "ü§ù Check SSH connection after booting into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - bash: |
      set -eux
      ./bin/storm-trident helper boot-metrics \
          "${{ parameters.sshKeyPath }}" \
          "${{ parameters.hostIp }}" \
          "${{ parameters.userName }}" \
          "${{ parameters.runtimeEnv }}" \
          --metrics-file $(Build.SourcesDirectory)/trident-finalize-update-metrics.jsonl \
          --metrics-operation update1
    displayName: "Create boot metrics for booting into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - template: ../testing_common/trident-metrics.yml
    parameters:
      tridentSourceDirectory: $(Build.SourcesDirectory)
      tridentConfigPath: ${{ parameters.tridentConfigPath }}
      deploymentEnvironment: ${{ parameters.deploymentEnvironment }}
      runtimeEnvironment: ${{ parameters.runtimeEnv }}
      tridentConfigurationName: ${{ parameters.tridentConfigurationName }}
      metricsFile: $(Build.SourcesDirectory)/trident-finalize-update-metrics.jsonl
      tridentOperation: ab-update
      ${{ if eq(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: main
      ${{ if ne(variables['Build.SourceBranchName'], 'main') }}:
        kustoTableName: dev

  - bash: |
      set -eux
      python3 -u -m pytest \
          -m "${{ parameters.buildPurpose }}" \
          --capture=no \
          --junit-xml=${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_stage_finalize_ab_update_B_$(System.JobAttempt).junit.xml \
          --host ${{ parameters.hostIp }} \
          --runtime-env ${{ parameters.runtimeEnv }} \
          --configuration ${{ parameters.tridentConfigPath }} \
          --ab-active-volume $(abActiveVolume)
    timeoutInMinutes: 5
    workingDirectory: $(Build.SourcesDirectory)/e2e_tests
    displayName: "üî¨ Run Trident E2E tests after A/B update into runtime OS B"
    condition: and(succeeded(), ne(variables['abActiveVolume'], 'null'))

  - task: PublishTestResults@2
    condition: and(succeededOrFailed(), ne(variables['abActiveVolume'], 'null'))
    inputs:
      testResultsFormat: JUnit
      testResultsFiles: ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_stage_finalize_ab_update_B_$(System.JobAttempt).junit.xml
      testRunTitle: ${{ parameters.deploymentEnvironment }}_trident_e2e_tests_${{ parameters.tridentConfigurationName }}_stage_finalize_ab_update_B_$(System.JobAttempt)
    displayName: "Publish test results for A/B update into runtime OS A that was staged and finalized independently"

  - bash: |
     mkdir -p $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
     cp ./e2e_tests/${{ parameters.tridentConfigurationName }}_${{ parameters.jUnitXMLIdentifier }}_stage_finalize_ab_update_B_$(System.JobAttempt).junit.xml $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT/
    displayName: "Prepare JUnit XML for artifact publishing"
    condition: and(succeededOrFailed(), ne(variables['abActiveVolume'], 'null'))

  - task: PublishBuildArtifacts@1
    displayName: "Publish JUnit XML for stage-finalise A/B update B"
    condition: and(succeededOrFailed(), ne(variables['abActiveVolume'], 'null'))
    inputs:
      pathToPublish: $(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT
      artifactName: trident_stage_finalize_ab_update_B_test_results

  # 1) Download the previously published JUnit XML files
  - task: DownloadPipelineArtifact@2
    displayName: 'Download JUnit test results'
    inputs:
      artifact: 'trident_stage_finalize_ab_update_B_test_results'   # ‚úÖ This must exactly match the 'artifactName' you used in PublishBuildArtifacts@1
      path: '$(Build.ArtifactStagingDirectory)/junits'

# 2) Filter out only the stage-finalize AB update B test reports
  - bash: |
     mkdir -p $(Build.ArtifactStagingDirectory)/filtered-junits
     cp $(Build.ArtifactStagingDirectory)/junits/*stage_finalize_ab_update_B*.xml \
       $(Build.ArtifactStagingDirectory)/filtered-junits/
     echo "Filtered JUnit files:"
     ls -la $(Build.ArtifactStagingDirectory)/filtered-junits/
    displayName: 'Filter JUnit files for dashboard push'

# 3) Invoke common template to push results into your DB
  - template: ../common/dbCommunication/push-test-results-to-db.yaml
    parameters:
      marinerTridentPipelinesSourceDirectory: '$(Build.SourcesDirectory)' 
      junitFilesDirectory:                    '$(Build.ArtifactStagingDirectory)/filtered-junits'
      isStaging:                              true
      buildConfigArtifactName:                'build-number-trident-stage-finalize'
      architecture:                           'x86_64'
      test_suite_name:                        'trident-stage-finalize'
      test_type_prefix:                       '${{ parameters.buildPurpose }}'

