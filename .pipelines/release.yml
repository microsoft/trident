# Core build logic that is common to all OneBranch builds.
parameters:
  - name: tridentSourceDirectory
    type: string
    default: "$(Build.SourcesDirectory)"

  - name: publishUniversalFeed
    type: boolean
    default: false

  - name: trident_version
    type: string
    default: ""

steps:
  - script: |
      set -eux
      INPUT=$(Build.BuildNumber)
      if [ ${{ parameters.publishUniversalFeed }} == False ]; then
        INPUT+=" --commit"
      fi
      TRIDENT_VERSION=$(python3 ./scripts/get-version.py $(echo "$INPUT"))
      echo "##vso[task.setvariable variable=trident_version]$TRIDENT_VERSION"
    workingDirectory: ${{ parameters.tridentSourceDirectory }}
    displayName: "Setting trident version"

  - task: onebranch.pipeline.version@1
    displayName: "Set build number"
    inputs:
      system: "Custom"
      customVersion: $(trident_version)

  - script: sudo tdnf install -y protobuf protobuf-c openssl-devel clang-devel rust
    displayName: Install native dependencies

  - script: |
      export TRIDENT_VERSION=$(trident_version)
      cargo build --locked --release 2>&1
      test "$(./target/release/trident --version)" = "trident $TRIDENT_VERSION"
      exit $?
    workingDirectory: ${{ parameters.tridentSourceDirectory }}
    displayName: Build Release

  - task: CopyFiles@2
    inputs:
      sourceFolder: "${{ parameters.tridentSourceDirectory }}/target/release"
      targetFolder: "$(ob_outputDirectory)"
      contents: "*"
    displayName: Copy files to output

  - task: CopyFiles@2
    inputs:
      sourceFolder: "${{ parameters.tridentSourceDirectory }}/artifacts"
      targetFolder: "/usr/src/mariner/SOURCES"
      contents: "*"
    displayName: Copy EMU to SOURCES

  - script: |
      set -eux
      full_version=$(trident_version)

      # Separate into version and prerelease identifier
      # for the RPM build.
      version=$(echo $full_version | cut -d'-' -f1)
      prerelease=$(echo $full_version | cut -d'-' -f2-)

      rpmbuild -bb --build-in-place trident.spec \
        --define="trident_version $full_version" \
        --define="rpm_ver $version" \
        --define="rpm_rel $prerelease"
    workingDirectory: ${{ parameters.tridentSourceDirectory }}
    displayName: Build RPM

  - task: CopyFiles@2
    inputs:
      sourceFolder: "/usr/src/mariner/RPMS/x86_64"
      targetFolder: "$(ob_outputDirectory)"
    displayName: Copy RPM file to output
