# Core build logic that is common to all OneBranch builds.

steps:
  - script: sudo tdnf install -y protobuf protobuf-c openssl-devel clang-devel rust
    displayName: Install native dependencies

  - script: cargo fmt -- --check 2>&1
    displayName: Check formatting

  - script: cargo clippy --locked -- -D warnings 2>&1
    displayName: Clippy (Linting)

  - script: cargo build --locked 2>&1
    displayName: Build Debug

  - script: cargo test --locked --all 2>&1
    displayName: Test Debug

  - script: cargo build --locked --release 2>&1
    displayName: Build Release

  - task: CopyFiles@2
    inputs:
      sourceFolder: "$(Build.SourcesDirectory)/target/release"
      targetFolder: "$(ob_outputDirectory)"
      contents: "*"
    displayName: Copy files to output

  - script: rpmbuild -bb --build-in-place trident.spec
    displayName: Build RPM

  - task: CopyFiles@2
    inputs:
      sourceFolder: "/usr/src/mariner/RPMS/x86_64"
      targetFolder: "$(ob_outputDirectory)"
    displayName: Copy RPM file to output

  - script: make setsail-docs
    displayName: Build Setsail Docs

  - task: CopyFiles@2
    inputs:
      sourceFolder: "$(Build.SourcesDirectory)/target/setsail-docs"
      targetFolder: "$(ob_outputDirectory)"
    displayName: Copy Setsail Docs to output

  - script: tdnf remove -y rust
    displayName: Remove Rust

  - task: RustInstaller@1
    inputs:
      # Can be any "MSRustup" version, such as ms-stable, ms-1.54 or ms-stable-20210513.5 - for more details see https://mscodehub.visualstudio.com/Rust/_git/rust.msrustup
      # For supported versions see https://mscodehub.visualstudio.com/Rust/_packaging?_a=package&feed=Rust&view=versions&package=rust.tools-x86_64-pc-windows-msvc&protocolType=NuGet
      rustVersion: ms-1.73
      # Space separated list of additional targets: only the host target is supported with the toolchain by default.
      #additionalTargets: $(additionalRustTargets)
      # URL of an Azure Artifacts feed configured with a crates.io upstream. Must be within the current ADO collection.
      # NOTE: Azure Artifacts support for Rust is not yet public, but it is enabled for internal ADO organizations.
      # https://learn.microsoft.com/en-us/azure/devops/artifacts/how-to/set-up-upstream-sources?view=azure-devops
      cratesIoFeedOverride: sparse+https://pkgs.dev.azure.com/mariner-org/ECF/_packaging/crates.io/Cargo/index/
      # URL of an Azure Artifacts NuGet feed configured with the mscodehub Rust feed as an upstream.
      # * The feed must be within the current ADO collection.
      # * The CI account, usually "Project Collection Build Service (org-name)", must have at least "Collaborator" permission.
      # When setting up the upstream NuGet feed, use following Azure Artifacts feed locator:
      #   azure-feed://mscodehub/Rust/Rust@Release
      toolchainFeed: https://pkgs.dev.azure.com/mariner-org/ECF/_packaging/Rust/nuget/v3/index.json

  - script: cargo install grcov
    displayName: Install grcov

  - script: make coverage
    displayName: Collect code coverage

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'Cobertura'
      summaryFileLocation: target/coverage/cobertura.xml
      #pathToSources: # string. Path to Source files. 
      #reportDirectory: # string. Report directory. 
      #additionalCodeCoverageFiles: # string. Additional files. 
      #failIfCoverageEmpty: false # boolean. Fail when code coverage results are missing. Default: false.

  - script: |
      set -eux
      tdnf install -y bc
      COVERAGE=`jq .coveragePercent target/coverage/covdir`
      BASELINE=48
      if (( $(echo "$COVERAGE < $BASELINE" | bc -l) )); then
        echo "Coverage is $COVERAGE, which is less than $BASELINE% set as the baseline"
        exit 1
      fi
    displayName: Assert coverage is above baseline