#!/usr/bin/python3

import argparse
import json
import shutil
import textwrap
from enum import Enum


class RustLogLevel(Enum):
    TRACE = "trace"
    DEBUG = "debug"
    INFO = "info"
    WARN = "warn"
    ERROR = "error"


class RustLog:
    def __init__(self, raw_data: str):
        try:
            data = json.loads(raw_data)
        except json.JSONDecodeError as ex:
            print(f"Failed to parse line: {line}")
            exit(1)
        self.level = RustLogLevel(data["level"])
        self.target = data["target"]
        self.message: str = data["message"]
        self.module = data["module"]
        self.file = data["file"]
        self.line = data["line"]


class Logger:
    def __init__(self):
        self.width = shutil.get_terminal_size().columns

    def color(log_level: RustLogLevel) -> str:
        if log_level == RustLogLevel.TRACE:
            return "\033[38;5;176m"
        elif log_level == RustLogLevel.DEBUG:
            return "\033[0;36m"
        elif log_level == RustLogLevel.INFO:
            return "\033[0;32m"
        elif log_level == RustLogLevel.WARN:
            return "\033[0;33m"
        elif log_level == RustLogLevel.ERROR:
            return "\033[0;31m"
        else:
            return "\033[0;37m"

    def color_reset() -> str:
        return "\033[0m"

    def log(self, log: RustLog):
        print(
            f"{Logger.color(log.level)}{log.level.value.upper()}{Logger.color_reset()} at \033[1m{log.file}:{log.line}\033[22m:"
        )
        msg = textwrap.wrap(
            log.message, width=(self.width - 2), replace_whitespace=False
        )
        msg = textwrap.indent("\n".join(msg), "  ")
        print(msg)


parser = argparse.ArgumentParser(description="Parse and colorize rust logs")
parser.add_argument("log_file", type=str, help="The log file to parse")
args = parser.parse_args()

logger = Logger()

with open(args.log_file, "r") as log_file:
    for line in log_file:
        log = RustLog(line)
        logger.log(log)
