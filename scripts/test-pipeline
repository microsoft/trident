#!/usr/bin/python3

# # # # # # # # # # # # # # # # # # # # #
#             W A R N I N G             #
#    This script is used in pipelines   #
#      and in `make check-pipelines`    #
#       Be careful when modifying!      #
# # # # # # # # # # # # # # # # # # # # #

import argparse
from dataclasses import dataclass
import subprocess
import sys
import tempfile
import json
from typing import Any, Dict


@dataclass
class PipelineMetadata:
    ado_id: int
    gh_id: int = -1
    parameters: Dict[str, Any] = None


pipeline_metadata_map: Dict[str, PipelineMetadata] = {
    "pr": PipelineMetadata(ado_id=2113, gh_id=5066),
    "pr-e2e": PipelineMetadata(ado_id=2195),
    "pr-e2e-azure": PipelineMetadata(ado_id=4524),
    "ci": PipelineMetadata(ado_id=3371, gh_id=5067),
    "pre": PipelineMetadata(ado_id=2648),
    "rel": PipelineMetadata(
        ado_id=3370,
        parameters={"specificVersion": "1.0.0"},
    ),
    "testing": PipelineMetadata(ado_id=3262),
    "tester": PipelineMetadata(ado_id=3210),
    "scale": PipelineMetadata(ado_id=4217),
    "scale-official": PipelineMetadata(ado_id=4465),
    "azl-cicd": PipelineMetadata(
        ado_id=4358,
        parameters={
            "baseImagePipelineBuildId": "730139",
            "baseImageArm64PipelineBuildId": "730138",
        },
    ),
    "prism-cicd": PipelineMetadata(ado_id=4482),
    "full-validation": PipelineMetadata(ado_id=4500),
}


def test_pipeline(
    pipeline, pipeline_id, pipeline_parameters, quiet, selected_branch=None
):
    if not selected_branch:
        selected_branch = (
            "refs/heads/"
            + subprocess.run(
                ["git", "rev-parse", "--abbrev-ref", "HEAD"],
                capture_output=True,
                check=True,
            )
            .stdout.decode("utf-8")
            .strip()
        )

    print(
        f"Checking pipeline '{pipeline}' with ID '{pipeline_id}' on branch '{selected_branch}'",
        file=sys.stderr,
    )

    payload = {
        "previewRun": True,
        "resources": {"repositories": {"self": {"refName": selected_branch}}},
    }

    if pipeline_parameters:
        payload["templateParameters"] = pipeline_parameters

    with tempfile.NamedTemporaryFile() as payload_file:
        payload_file.write(json.dumps(payload).encode("utf-8"))
        payload_file.flush()

        cmd = [
            "az",
            "devops",
            "invoke",
            "--org",
            "https://dev.azure.com/mariner-org",
            "--api-version",
            "7.0",
            "--area",
            "pipelines",
            "--resource",
            "runs",
            "--route-parameters",
            "project=ECF",
            f"pipelineId={pipeline_id}",
            "--http-method",
            "POST",
            "--in-file",
            payload_file.name,
        ]
        output = subprocess.run(
            cmd,
            capture_output=True,
        )

    if output.returncode != 0:
        print("Failed to preview pipeline:", file=sys.stderr)
        print(output.stderr.decode("utf-8"), file=sys.stderr)
        exit(1)

    print("Pipeline previewed successfully", file=sys.stderr)

    if not quiet:
        out_json = json.loads(output.stdout.decode("utf-8"))
        print(out_json["finalYaml"])


parser = argparse.ArgumentParser(description="Preview a pipeline run")

parser.add_argument(
    "pipeline",
    type=str,
    help="The pipeline to preview",
    choices=pipeline_metadata_map.keys(),
)

parser.add_argument(
    "-b",
    "--branch",
    type=str,
    help="The branch to preview the pipeline for",
    default=None,
)

parser.add_argument(
    "-q", "--quiet", action="store_true", help="Suppress YAML output", default=False
)

parser.add_argument(
    "-g", "--github", action="store_true", help="Test github pipelines", default=True
)

args = parser.parse_args()

pipeline_metadata = pipeline_metadata_map[args.pipeline]

if args.github and pipeline_metadata.gh_id == -1:
    print(f"Pipeline {args.pipeline} does not have a GitHub ID", file=sys.stdout)
    exit(0)
if not args.github and pipeline_metadata.ado_id == -1:
    print(f"Pipeline {args.pipeline} does not have a ADO ID", file=sys.stdout)
    exit(0)

test_pipeline(
    args.pipeline,
    pipeline_metadata.ado_id if not args.github else pipeline_metadata.gh_id,
    pipeline_metadata.parameters,
    args.quiet,
    args.branch,
)
