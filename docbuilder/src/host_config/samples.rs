use std::{io::Write, path::Path};

use anyhow::{Context, Error};

pub(crate) fn print(
    name: String,
    dest: Option<impl AsRef<Path>>,
    markdown: bool,
) -> Result<(), Error> {
    let (comment, yaml) = &trident_api::samples::sample_hc::sample_host_configuration(&name)
        .context("Failed to generate sample")?;
    let raw_yaml = serde_yaml::to_string(yaml).context("Failed to serialize sample")?;

    let autogen_warning = {
        let string = format!(
            indoc::indoc! { r#"
                THIS FILE IS AUTOMATICALLY GENERATED BY `{}::print_sample("{}")`.
                DO NOT EDIT MANUALLY!

                {}
                "#
            },
            file!(),
            name,
            comment
        );

        if markdown {
            format!("<!-- {} -->", string)
        } else {
            string.lines().fold(String::new(), |mut acc, l| {
                acc.push_str("# ");
                acc.push_str(l);
                acc.push('\n');
                acc
            })
        }
    };

    let output = if markdown {
        format!("{}\n\n```yaml\n{}```", autogen_warning, raw_yaml)
    } else {
        format!("{}\n{}", autogen_warning, raw_yaml)
    };

    if let Some(dest) = dest {
        let mut file = osutils::files::create_file(dest.as_ref())
            .context(format!("Failed to create file {}", dest.as_ref().display()))?;
        file.write_all(output.as_bytes()).context(format!(
            "Failed to write to file {}",
            dest.as_ref().display()
        ))?;
    } else {
        println!("{}", output);
    }

    Ok(())
}
