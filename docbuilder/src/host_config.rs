use std::{io::Write, path::Path};

use anyhow::{Context, Error};
use trident_api::config::HostConfiguration;

use crate::schema_renderer::{SchemaDocBuilder, SchemaDocSettings};

pub(crate) fn build(dest: impl AsRef<Path>, settings: SchemaDocSettings) -> Result<(), Error> {
    let builder = SchemaDocBuilder::new(HostConfiguration::generate_schema(), settings)
        .context("Failed to create schema doc builder")?;
    let pages = builder.build_pages().context("Failed to build pages")?;

    for page in pages {
        let path = dest.as_ref().join(&page.relative_path);
        std::fs::write(path, &page.content)?;
    }

    Ok(())
}

pub(crate) fn print_schema(dest: Option<impl AsRef<Path>>) -> Result<(), Error> {
    let schema = HostConfiguration::generate_schema();
    let schema = serde_json::to_string_pretty(&schema)?;

    if let Some(dest) = dest {
        let mut file = osutils::files::create_file(dest.as_ref())
            .context(format!("Failed to create file {}", dest.as_ref().display()))?;
        file.write_all(schema.as_bytes()).context(format!(
            "Failed to write to file {}",
            dest.as_ref().display()
        ))?;
    } else {
        println!("{}", schema);
    }

    Ok(())
}

pub(crate) fn print_sample(dest: Option<impl AsRef<Path>>, markdown: bool) -> Result<(), Error> {
    let autogen_warning = {
        let string = format!(
            indoc::indoc! { r#"
                THIS FILE IS AUTOMATICALLY GENERATED BY `{}::print_sample()`.
                DO NOT EDIT MANUALLY!"#
            },
            file!()
        );

        if markdown {
            format!("<!-- {} -->", string)
        } else {
            string
                .lines()
                .map(|l| format!("# {}\n", l.trim()))
                .collect::<String>()
        }
    };

    let raw_yaml =
        serde_yaml::to_string(&trident_api::samples::sample_hc::sample_host_configuration())
            .context("Failed to serialize sample")?;

    let output = if markdown {
        format!("{}\n\n```yaml\n{}```", autogen_warning, raw_yaml)
    } else {
        format!("{}\n{}", autogen_warning, raw_yaml)
    };

    if let Some(dest) = dest {
        let mut file = osutils::files::create_file(dest.as_ref())
            .context(format!("Failed to create file {}", dest.as_ref().display()))?;
        file.write_all(output.as_bytes()).context(format!(
            "Failed to write to file {}",
            dest.as_ref().display()
        ))?;
    } else {
        println!("{}", output);
    }

    Ok(())
}
